[{
    "title": "Running and speaking at Online Events: what we’ve learned",
    "date": "",
    "description": "I started DevRel up at Jump24 during the height of COVID: what was it like?",
    "body": "**This article was written for my employer Jump24, you can read the original source article .\nMy start at Jump24 was never going to be straightforward – the United Kingdom was in full COVID-19 lockdown, bringing down tech meetups and conferences worldwide at the point when I was fully launching into a Developer Relations role, which would immediately have to be redefined to make our developer outreach work. But: we currently have a talk and live code demo session currently on tour – so how did we do it, and what experience have we gained? But first: some observations about the impact of COVID-19 on our communities.\nSlow to adapt: how tech got caught napping It’s hardly a surprising outcome with what happened after the Prime Minister announced full lockdown on 24th March. 34 tech events happened in the first two months in the West Midlands region in the UK, including regulars from DevOps, AWS, Ruby, Javascript, Xamarin/.NET, Docker and ProductTank. After lockdown in April and May, just 6 of the regular meetups happened after switching online, almost all of them Zoom calls.\nThis was only for our region of course: the unexpected overhead of suddenly needing to organise and promote on entirely digital platforms meant that grassroots meetups dropped off all over the world and conferences got cancelled with no time to arrange alternative online setups.\nSpeaking: Turbocharged development with Xdebug, Docker \u0026amp; PhpStorm So, the first question we had to ask was that if some usergroups were being continued online, should we go ahead with the idea of delivering a talk we’d prototyped internally? First, we’d have to solve the elephant in the room: this was due to be a live code demo. So, to deliver this talk we’d need:\n A speaker, me Google Slides, using Chrome A bash terminal PhpStorm Firefox  How do you juggle all this in virtual form, and how do you make it presentable? Step forward Jump24’s Ollie Matthews: Operations Manager and avid gaming streamer.\nLessons from the gaming world Multiple input sources to create a slick streaming platform, you say? Well, it came as no surprise that professional gamers have had this mastered for quite some time. Ollie outlined the equipment needed, so here’s how we built the home studio for streaming:\nThe office streaming setup Macbook Pro 2016 (Touchbar) https://everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i9-2.3-eight-core-15-mid-2019-touch-bar-specs.html\nIn the field of web application development, particularly in the realms of PHP, Javascript/Node and Ruby, the dominant Operating System on a user level tends to be skewed towards macOS. We use Macs for developing in Laravel, so it’s worth noting that our experience in putting together a streaming setup is already going to differ from the gaming world, where Windows is by far the dominant platform.\nElgato Stream Deck https://www.elgato.com/en/gaming/stream-deck\nElgato’s Steam deck is really the keystone feature of the setup – the ability to create a custom setup that can control lighting, desktop applications (so this tackled the quick switch between terminal, IDE, Firefox and Google Slides on Chromium), Twitch, and OBS (in particular scenes \u0026amp; transitions) is a gamechanger. This bit of kit is no stranger to the gaming world: streamers use it regularly for Twitch (and other socials integration such as Twitter), recording and scene control. Elgato has recently opened up the button marketplace, adding new control sets such as integration for VSCode.\nElgato Key Light https://www.elgato.com/en/gaming/key-light\nDespite many people’s beliefs, lighting is one of, if not the most important part of any streaming setup. So, the next thing we went for in the Elgato family is the Key light. Yes, this may seem a little expensive compared to other LED panels or ring lights but this particular light seamlessly integrates into the rest of our setup – including the Stream Deck.\nWith its sleek design it can fit into any space or desk setup, and hooking it up to your PC via wifi allows you to tweak the brightness and temperature to best suit your needs.\nDespite the premium nature of this product, the setup wasn’t all plain sailing. The Key Light requires a 2.4ghz banded Wifi and doesn’t work with 5ghz. I have a dual band router, so when I switched on 2.4ghz it firstly had a weak signal despite not being far away (common with poor routers dished out by providers). Secondly, my new TV fights with the Key Light over who gets to be connected to the network.\nFor more advanced colour options, you might want to consider the Elgato Ring Light, but still has the same potential burden regarding control.\nRode NT-USB with boom or Elgato Wave:3 https://www.rode.com/microphones/nt-usb\nhttps://www.elgato.com/en/wave-3\nOriginally I’d purchased the Blue Yeti on the back of many recommendations, but it shipped broken. Rode’s USB mic might not have the multi pattern recording modes that the Yeti does, but it does come with a decent pop filter and reasonable price tag. In the office setup we use the Elgato Wave:3 with a boom and filter.\nLogitech Streamcam https://www.logitech.com/en-gb/products/webcams/streamcam.960-001281.html\nChoices for HD streaming are vast, and so sifting through the pages of 1080p cameras can be daunting. The important bit here is to answer the glaring question: “do I need a 1080 webcam?”. Well, what we wanted at Jump24 was as professional a setup as we could get, which included a 1080 cam. However, it’s worth pointing out that if your scenes are mostly a small corner box with a slide deck taking centre stage (or on a live demo like ours – a terminal, browser etc.) then realistically any cam will likely be sufficient.\nElgato Green Screen https://www.elgato.com/en/gaming/green-screen\nThis is something new we have added to our setup but yet to implement. Using a green screen will allow us to expand our Overlay options when doing events, from branded backdrops, animations to simply removing a messy background.\nA green screen can be something that eliminates issues; add a chrome key filter in your broadcasting app of choice and, just like magic: the background has disappeared.\nOBS Studio https://obsproject.com/\nOpen Broadcaster Studio has been at the forefront of game streaming for at least five years. It’s ability to take almost any media input and generate an output for streaming, and for free as Open Source Software makes it an industry standard of sorts. There are disadvantages, however – the majority of its users tend to be on Windows platforms, so if you’re using the MacOS or Linux ports it can be a little more buggy. In order to hook up OBS to various hosting platforms where no integration with OBS is possible, it needs the ‘Virtual Camera’ feature, that will take the OBS output and pipe it into a virtual device. The likelihood is that if you are in control of your stream, you can hook up OBS to YouTube or Twitch with API keys directly and thus won’t need to use the Virtual Camera, but when you are being hosted and control is out of your hands it will be needed.\nBeing Hosted: your meetup’s tech stack Zoom / Skype Zoom capitalised on their new found advantage by offering unlimited free tier calls. It’s probably not that much of a surprise then that Zoom seems to have become the default. I’ve done the talk a couple of times now on Zoom with OBS’s Virtual Camera output and not found any issues with it.\nJitsi Jitsi would absolutely not play ball with the OBS Virtual camera output – problems included output resolution and “flipping” the output image. What made Jitsi unusable for us, however, is that there is a tendency for meetups using it to have the free tier (for understandable reasons). Unlike the resource Zoom has to throw at free tier usage, it was clear that the servers were heavily throttling the connection. That’s not a problem if you’re doing a brief meeting, but presenting and pulling down docker containers? Nope.\nStreamyard Streamyard is a popular option, and from a speakers’ perspective has decent features: a backstage broadcasting area and a screenshare perspective that takes care of the scene layout for you. There is, however, a disadvantage to this (as we discovered) in that you can’t use OBS’s virtual camera output. The image resolution is cropped awkwardly, but more importantly with OBS you’re trying to replicate a feature that Streamyard is designed for. This is where there’s a big difference in Streamyard between speaking and hosting: as a speaker, you don’t have control whereas when hosting you can include backdrops with branding.\nHosting: Tech stack options with Kevin Lewis So, we’ve covered being the speaker in virtual meetups, but what about hosting your own? Before COVID hit, we were planning to launch a new tech, art \u0026amp; culture event in the city, BrumTech Tapas.\nWith the switch to virtual, we needed to think about our options from an organisers’ view. Rather than go into this foray blindly, I spoke to Vonage’s Kevin Lewis, whom I knew had a mountain of experience in this area due to his events work with the You Got This Conference Series, Women of React and Vonage’s Developer Day.\n Online events provide some really exciting opportunities to build experiences that just wouldn’t be possible in a physical space, for the affordances that tech brings. When organizing events, you can try and emulate offline events complete with networking setups, work towards an Apple WWDC-style highly-produced live TV show, or create more novel experiences such as Roguelike Celebration.\nWhen choosing your setup, there are five core considerations:\n  Complexity of Operation – how confident is your team to use more complex tooling?\n  Creative Flexibility – how customized do you need the output to be?\n  Moderation Bandwidth – how much people-power do you have for moderation, and how does the choice of platforms impact this?\n  Attendee Experience – what is an ideal experience for attendees? Do you want to facilitate networking? Should it all be in one platform?\n  Speaker Experience – how involved or complex can your speaker experience be while still being appropriate for who you have invited?\n  Some of these items are inextricably linked – having more creative flexibility is likely to increase complexity, for example.\nMy first full-scale online conference was Women of React back in April. We used Skype (with NDI) and OBS for managing the stream, YouTube for hosting the stream and Discord for community interactions. We got a really lovely set of custom scenes and full control over what was seen or heard, but it was a pain to keep on top of. The speakers and MC had to really work through all of the technical quirks (which they did fantastically), but it was difficult.\nUsing a video call, piping data into OBS via the NDI protocol and pushing out a completed stream to your host means your one device will be doing lots of computationally-expensive operations, and if it fails to deliver the whole event will suffer. There are contingencies to this – such as renting a more powerful cloud-hosted machine and completing the work on it, but this comes at an additional cost and setup time.\nMy team at Vonage chose to use a platform called Remo for Vonage Developer Day – which has a networking component aiming to emulate offline events. Attendees can gather and move around tables – each a small video call between groups.\nThrough all the events I’ve run, I still believe Streamyard provides the best overall setup for publishing livestreams. While you are creatively limited to just the 7 pre-set layouts provided, they are designed with care and almost every use case in mind.\nAlso consider the need for networking in the long, long year that is 2020. I am a fan of giving people spaces to meet, but nothing will replace being in the same room. Many folks have screen fatigue, and many will be motivated only by consuming the organized content. Consider if this is true in your community and whether you can place somewhat-forced networking efforts aside for a happier time.\nIf you want to find out more about the considerations and outcomes around Women of React, Vonage Developer Day and You Got This From Your Couch – you can watch my talk from DevRelCon Earth earlier this year.\nEvent Branding – design considerations The new branding for Brum Tech Tapas along with the website had just been completed before we went into the first lockdown. The idea was to keep it simple and not focus solely on the tech community. A lot of this was achieved by building the website and the photography we used to represent the diverse cultural scene in Birmingham.\nThe next design aspect we had to tackle was moving the talks over to Twitch. Something as designers we had no experience in. We started taking a look at other Twitch coder accounts and noticed that the aesthetics weren’t always a priority, something we wanted to avoid. As this was something relatively new for tech talks in Birmingham we wanted to make sure we put our best foot forward, using our branding to create something aesthetically pleasing whilst allowing for multiple speakers to be shown and live coding to be clear and visible.\nVirtual means more accessible options The equipment we put together and time invested in designs etc. comes at a cost. The decisions that we made are based on the notion that you don’t have to invest much to get a polished, professional setup that looks no different from international tech firms’ branding and content delivery.\nWhile that’s certainly the conclusion for what we were looking for, it’s important to bear in mind that to speak at a meetup or to host one, you technically don’t need any of this. This is vital to know if you’re starting out speaking and need some exposure, or you’re booting up a new usergroup (or transitioning online for the first time). All you actually need is an internet connection, a webcam and people to join. As with most things, the end goals of what you want to achieve dictate the requirements.\nVirtual meetups and conferences: advantages and disadvantages So, given that we’ve gone through planning, let’s have a bit of a postmortem on the key things to think about when it comes to running virtual tech events. As we approach tech events from a Developer Relations perspective – raising awareness of our work and doing developer outreach for education, it’s now very apparent what can run smoothly and what snagging points you can encounter.\nAdvantages Speaker Pools The rules have now been redefined – you can officially contact someone elsewhere on the planet and ask if they want to speak at your meetup. It’s worth noting that, while there is an element of truth to that sentence, many of the meetups I have spoken at have very much stuck to a pool of speakers already within their network. While it might have potentially opened more doors to speakers, it’s also worth considering that it doesn’t give you an immediate ‘yes’ from everyone.\nCost The cost of what you’re looking at has pretty much been outlined in the article. In-person meetups require spaces, the oh-so-stereotypical “Pizza for 30 developers” and drinks sponsorships. If you’ve got a fancier meetup, you might have catering. The cost of running a meetup can be £0 if you want it to be; even the price of a conference is suddenly astonishingly low considering the speakers you might have been able to virtually pull in.\nPotential Reach The point of a local usergroup is that you form smaller communities around common themes – the convenience of opening it up without a physical form means that your attendance might well spike. In the usergroups we’ve spoken at on our current talk, it’s noticeable how the attendance is actually higher. In the PHP world this does however have a drawback – one of the reasons you’ll see more one some of the events is because PHP developers are aware of other local usergroups. There is a scenario playing out right now that we’ve seen. A point Raised by one of the usergroups we spoke at stated that the same talks are going round the circuit and thus someone from Bristol might not want to watch a talk on at PHPSW: because they already saw it at PHPMiNDS in Nottingham.\nDisadvantages Loss of 1-2-1 interaction Developer Relations still thrives on in-person 1-2-1 interactions – from my experience personally this is still the best way to network and create a hub of people with similar interests to get feedback and opinions off. Without that, the hardest part of expanding your network has pretty much gone. Yes, in speaking to event organisers, recreating this part of outreach has been attempted, but as of yet not many that I’ve spoken to have reported a successful method for doing it.\nInternet speeds This one stands out by a country mile. If COVID has shown us anything, it’s how reliant in the tech world we are for the Internet for software development beyond the obvious limitations of CI pipelines and Docker pulls.\nYour speaker’s connection goes down 5 hours before the event because someone drilled through a pipe. Your speaker’s connection goes down during the event while speaking because geese have attacked the exchange. What do you do?\nThat’s only from the speakers’ perspective. During the tour of our current talk, my internet speed was fairly poor, and an unexpected need to pull an nginx container resulted in my best Minecraft look. But what if you encounter this when you’re on StreamYard and hosting the whole event? Well, then you’ve not really got any options. But you can prepare by making sure you host from a high speed connection, especially if you have speakers from across the globe, and especially if they’re not in the standard Western world tech bubble.\nThe curse of remote working This is one of the biggest issues with moving virtual. You’ve just spent eight hours of your day on Zoom calls, JIRA and your IDE open in front of you, barely moving apart from the get the occasional coffee which is also now done in silence.\nCome 6:30pm, is opening up a Zoom call with 30 people in to have a virtual tech talk (that, in some cases, is being recorded and will be available at any point in the future you choose anyway) really how you want to spend your evening?\nLosing outreach: Slack/Discord This is Developer Relations. Marketing people might well not see the problem with throwing out “for discussions, sign up to our Slack/Discord!”, but we know the pain of being told for the 10th time in a month to sign into a new social media platform for one event that will be used once.\nThis particular subject has been covered recently by Joe Nash, offering to open up discussions as to why Let’s Just Create a New Slack really isn’t the one-size-fits-all solution.\nSource: https://twitter.com/jna_sh/status/1326514552251568130\nFor more fitting options, specifically around the biggest sticking point of live feedback/community comms – moderation – check out Joe’s tweets and subsequent discussions on why certain platforms have advantages over Slack. What’s interesting is that Discord comes up time and time again in conversations – another crossover from the gaming world.\nConclusion: A more versatile outreach So, what are the results of what we did? Well, like most people I expect, we’re ready for physical events again for sure. But for now, I’ll put it this way: we’re now equipped and experienced in hosting and delivering virtual content. This is something we certainly couldn’t do before, and besides: without the COVID crisis many large tech companies did have the ability to create content in this way. So, by preparing for virtual content and calling in advice across disciplines both internally and externally – Jump24 has a far more versatile outreach capability. Which, after all, is the point of Developer Relations, isn’t it?\nWith thanks to Ollie Matthews, Anneka Mistry, Kevin Lewis and Joe Nash.\n",
    "ref": "/blog/online-events/"
  },{
    "title": "The Dev Radio Episode 021",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+021.mp3 \nTracklist  Bill Nelson - The Ritual Echo [Esoteric, 2017] Malcolm Robinson - Main Theme [Self-Released, 2015] Throwing Snow - Trébucher [Houndstooth, 2018] Tom Tom Club - Wordy Rappinghood [Sire, 1981] Brother Culture - Fear No Evil [Roots Garden, 2015] Kurupt FM - Suttin Like That [XL Recordings, 2017] Yard Act - The Trapper\u0026rsquo;s Pelts [Turntable Kitchen, 2020] Stan Bush - The Touch [Epic, 1986] Ocean Wisdom - Don [High Focus Records, 2018] Genaside II - Streets of San Fran Brixton [Durban Poison, 1999] Childish Gambino - 53.49 [RCA, 2020] INXS - Don\u0026rsquo;t Lose Your Head [Mercury, 1997] Uffie - MCs Can Kiss [Ed Banger, 2009] Meco - Star Wars Theme / Cantina Band [Millenium, 1977] The Cat Empire - Hello [Virgin, 2003] Curve - Coast Is Clear [Anxious, 1991] Lime - On The Grid [Matra, 1983] Messy Goes To OKIDO - Circuits [Doodle Productions, 2018] Cell7 - City Lights [Self-Released, 2019] Captain Beefheart \u0026amp; His Magic Band - Tropical Hot Dog Night [Warner Bros, 1978] Sasha - Xpander (Live at The Barbican) [LateNightTales, 2017]  ",
    "ref": "/dev-radio/dev-radio-021/"
  },{
    "title": "The Dev Radio Episode 020",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+020.mp3 \nTracklist  RJD2 - Salud [Definitive Jux, 2002] The Art of Noise - The Chameleon\u0026rsquo;s Dish [China Records, 1986] The Fall - Blindness [Slogan, 2005] Max Roach - Members Don\u0026rsquo;t Git Weary [Atlantic, 1968] Unique 3 - Serial Killer [Fat! Records, 2007] Deftones - Ohms [Reprise Records, 2020] Carlton and the Shoes - Love Me Forever [Studio One, 1979] The Asteroids Galaxy Tour - My Club [Hot Bus, 2014] Snowboy and the Latin Section - Tres Tambores [Snowboy Records, 2016] The Goats - ¿Do The Digs Dug? [Ruffhouse, 1992] Kassem Mosse - B2 [Workshop, 2011] Jeff Parker - Fusion Swirl [International Antham Recording Company, 2020] The International TV Orchestra - Home and Away [Broadwood Records, 2014] Alice Cooper - Lost in America [Epic, 1994] Example \u0026amp; DJ Yoda - Trippin' in the Sky [Staneric Recordings, 2020] The Flying Eyes - Poison the Well [World in Sound, 2011] Steffi - Between Form And Matter [Air Texture, 2018] Marvin Gaye - Inner City Blues (Make Me Wanna Holler) [Tamla, 1972] James - Sometimes [Fontana, 1993]  ",
    "ref": "/dev-radio/dev-radio-020/"
  },{
    "title": "The Dev Radio Episode 019",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+019.mp3 \nTracklist  Mu-Ziq - Scaling [Virgin, 1999] Shawn Lee\u0026rsquo;s Incredible Tabla Band - Let There Be Drums [Ubiquity Records, 2012] The Anchoress - Chip on your Shoulder [KScope, 2016] Clap! Clap! - Ashiko [Black Acre, 2014] Humble Pie - Good Booze and Bad Women [A\u0026amp;M, 1973] Prince Buster - Al Capone [Prince Buster Music, 1969] Toasty - Take it Personal [Hotflush Recordings, 2005] IYAMAH - Seasons [Self-released, 2019] Mbongwana Star - Malukayi [World Circuit, 2015] The Jesus \u0026amp; Mary Chain - Amputation [Artificial Plastic, 2017] Daphne \u0026amp; Celeste - 16 Stars [Balatonic, 2018] Saint Esmeralda feat. Leroy Gomez - Don\u0026rsquo;t Let Me Be Misunderstood [Casablanca, 1977] A+ - Enjoy Yourself [Universal, 1998] Sie feat. Courtney Gray - Riders On The Storm [Pussyfoot Records, 2018] Florian Pellissier Quintet - South Beach [Heavenly Sweetness,2018] Shampoo - Delicious [Food, 1994] Jadell - Hip Joint [Illicit Recordings, 2002] The Tamperer feat. Maya - If You Buy This Record (Your Life Will Be Better) [Time, 1998] The Gaslamp Killer - Moving On [Cuss, 2020] Teeth of the Sea - VISITOR [Rocket Records, 2019]  ",
    "ref": "/dev-radio/dev-radio-019/"
  },{
    "title": "The Dev Radio Episode 018",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+018.mp3 \nTracklist  Hybrid - If I Survive (Orchestral Version) [Distinct\u0026rsquo;ive, 2012] Hybrid - If I Survive [Distinct\u0026rsquo;ive, 1999] Therepy? - Disgracelands [A\u0026amp;M, 1992] Funktuation - Oora Paaru [Self-released, 2019] Holy Fuck - Deleters [Holy F Music, 2020] Jaykae - Chat (feat. Local) [Self-Released, 2019] The Wipeouters - P\u0026rsquo;Twaang! [Casual Tonalities, 2001] Bacao Rhythm \u0026amp; Steel Band - My Jamaican Dub [Big Crown Records, 2020] Trickfinger - Exclam [Acid Test, 2017] Dave \u0026amp; Toni Arthur - Six Jolly Miners [Topic, 1969] Ghost Culture - Arms [Phantasy, 2015] Peri Boyz - Cheeky Nando\u0026rsquo;s [Self-released, 2015] Baby Huey \u0026amp; The Babysitters - Listen to Me [Curtom, 1971] Gaudi - Life (Feat. Jahmai) [Six Degrees Records, 2013] The Alan Parsons Project - Mammagamma - Instrumental [Arista, 1982] Scuba - NE1BUTU [Hotflush, 2013] Liquid Liquid - Bell Head [99 Reords, 1981] Johnny Lewis Quartet - Cissy Strut [Juno, 1972] Genod Droog - Genod Droog Theme [Slacyr, 2008] Death in Vegas - Your Loft My Acid (Fearless Transhouse Single Mix) [Portobello Records, 2011] Blue States - Across the Wire [Memphis Industries, 2004]  ",
    "ref": "/dev-radio/dev-radio-018/"
  },{
    "title": "The Dev Radio Episode 017",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+017.mp3 \nTracklist  Floating Points - Kites [Pluto, 2017] Ian Brown - Sister Rose - Japanese Version [Polydor, 2007] John Carpenter - The Bank Robbery [Silva Screen, 2000] Rodrigo y Gabriela - Tamacun [Rubyworks, 2006] Max Sedgley feat. Tor Casey - Sound Boy [Jalepeno, 2010] Eagles of Death Metal - Family Affair [UMe, 2019] Anthrax - Bring the Noise [Island, 1991] Moondog - Witch of Endor [CBS, 1969] Pussy Riot - Bad Girls [Self-released, 2018] Ringo Deathstarr - Heavy Metal Suicide [Club Ac30, 2015] Shed - Silent Witness [50Weapons, 2012] Matt Berry - Medicine [Acid Jazz, 2013] Benjamin Zephaniah - Earth Liberation Sound [Fane Phonics, 2017] MC Devvo \u0026amp; Shady Piez - Crystal Meffin [Fat-Pie Records, 2007] Black Lodge - Horse with No Name [Mo\u0026rsquo;Wax, 2001] Blues Pills - High Class Woman [Nuclear Blast, 2015] The Maghreban \u0026amp; A-f-R-O - Hi Top Remix [R\u0026amp;S, 2018] Pop Will Eat Itself - Token Drug Song [RCA, 1992] Stone Temple Pilots - Sex \u0026amp; Violence [Atlantic, 1999] The Smashing Pumpkins - Perfect (Nellee Hooper Mix) [Virgin, 1998] Charles-Marie Widor - Organ Symphony No. 5 in F Minor (Op.42) played by Phillip Ledger [EMI, 2009]  ",
    "ref": "/dev-radio/dev-radio-017/"
  },{
    "title": "The Dev Radio Episode 016",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+016.mp3 \nTracklist  Phillip Glass \u0026amp; Olivia Belli - Etude No. 2 [Self Released, 2017] Shukar Collective - Verbal Fight [Roverboat Records, 2005] FATA BOOM - Take Credit [Self Released, 2018] Boss Hog - Formula X [Bronze Rat Records, 2017] Plastician - The Lift [Terrorhythm Recordings, 2014] Bomb the Bass - Dark Heart (The Darker Side)[4th \u0026amp; Broadway, 1995] Pram - Mother of Pearl [Domino, 2001] DANGERDOOM feat. Talib Kwali - Old School [Lex Records, 2006] Sam Smith \u0026amp; The Pharoahs - Wooly Bully [MGM, 1965] Paul Woolford - Vertigo [Junior Boy\u0026rsquo;s Own, 2005] Small Faces - Come on Children [Decca, 1966] John Coltrane - Like Sonny [Atlantic, 1961] The Brand New Heavies feat. Gangstarr - It\u0026rsquo;s Getting Hectic [FFRR, 1992] Race Horses - My Year Abroad [Stolen Recordings, 2012] Aphex Twin - Milk Man [Warp, 1996] Brian Eno \u0026amp; J. Peter Schwalm - Like Pictures Part #2 [Opal Records, 2001] The Music - Too High [Hut, 2002]  ",
    "ref": "/dev-radio/dev-radio-016/"
  },{
    "title": "A Fifth Pillar of Developer Relations",
    "date": "",
    "description": "On responsibilies in DevRel for Advocates.",
    "body": "I don\u0026rsquo;t think anyone could have predicted how bad 2020 would end up, but it certainly brought to light some thinking about how I\u0026rsquo;d like Developer Relations to change.\nThere is a specific reason for writing this article, but I realised that the topic it covered went a lot deeper, and exposes new trends in tech while raising some fairly important questions to consider both in Developer Relations and Web Development.\nHooray for Hugo So, the original reason for writing this is that returning visitors might have noticed a shiny new Dev Theatre site. It\u0026rsquo;s written in Hugo, using the fantastically functional and beautiful theme hugo-future-imperfect-slim. To give a slight bit of gushing for the tech: I LOVE this JAMStack. Golang compiles this site at lightning speed - at least five times faster than what was a rather over-engineered Gatsby codebase. I\u0026rsquo;ve found it to be a hugely positive experience, at a time when there have been few positives, so let\u0026rsquo;s get this out of the way:\nGatsby The reason the site is migrated is the whistle-blowing from a contractor on the running of Gatsby as a company. You can find this here.\nOK, OK: companies can be badly run, it happens. But what was it about this incident that made it any different, for me at least?\nIn the Bay Area, startups are regularly going from a CEO founder and co-founding CTO one minute, to whispering the word \u0026ldquo;blockchain\u0026rdquo; out into the Venture Capital Wild West to be rewarded with millions of dollars in other people\u0026rsquo;s cash. The company somehow scales to having 100 employees, maybe some scattered around the globe remote, hiring extremely expensive DevRel with what seems like a roll of the dice when it comes to how that scaling has been structured. From this perspective, Gatsby scored the right technologies at the right time, securing its name as the React JAMStack and massively scaling. The whistleblower in this case identifies a host of problems that come with the disogranisation that brings, but arguably the most damage was done with the response. The response is what made me realise that there are some topics to consider when you\u0026rsquo;re involved in Developer Relations, and Gatsby serves as fairly good case study.\nHere is the response from Gatsby CEO Kyle Matthews: https://twitter.com/kylemathews/status/1294006966310731776\nI\u0026rsquo;m always fascinated with the response companies and/or individuals concoct when faced with a major PR crisis. There is a tendency for Politicians, for instance, to give spectacular insights into their lack of self awareness by either doubling down or responding with something utterly moronic that they think people will swallow at face value.\nSo in this case, with Gatsby, you\u0026rsquo;d have thought that the alarm bells went off at GatsbyHQ, and the board would push the button to get a Public Relations consultancy to handle the hot potato.\nWhat actually happened was the CEO put out a statement saying, to words of this effect: \u0026ldquo;We are sorry that you feel offended, running this business is hard, we\u0026rsquo;re launching a Cloud Product soon by the way, we are not actually going to do anything about the points raised because we don\u0026rsquo;t care\u0026rdquo;.\nPR Damage is administered I wonder what effect Gatsby thought it would have? Realistically, what happened next was painfully predictable. End users on Twitter started discussing migrating from Gatsby to other technologies immediately (including me). Sounds harmless (what impact could I have, just being the end user of an Open Source framework?) but coupled with the aforementioned impending launch of Gatsby Cloud, one of it\u0026rsquo;s first commercial products suddenly potentially lost a massive chunk of it\u0026rsquo;s users, ergo it\u0026rsquo;s revenue. Elsewhere, major influencers in the worlds of Developer Relations, DevOps, Javascript, InfoSec/DevSecOps - you name it - were quick to fire ridicule on the handling of it all.\n2020: a year of confusion The Gatsby fallout is really just another tech botch to add to what has been a year of upheaval. We\u0026rsquo;ve had companies slow to act on COVID-19 (including in the DevRel space, companies that I shall leave nameless hiring in the middle of the pandemic with the requirement to be based in the Bay Area only, so presumably you start remote in San Francisco but when this all blows over you have to be on site which makes absolutely no sense), we\u0026rsquo;ve had a deluge of companies completely at odds about what \u0026ldquo;to do\u0026rdquo; about Black Lives Matter (the most baffling probably being TeeSpring pulling ANTIFA T-shirts because they\u0026rsquo;re political, while continuing to sell QAnon and other far Right Wing stuff like White Pride merchandise which presumably doesn\u0026rsquo;t qualify).\nWe also had the attempted launch of \u0026ldquo;Genderify\u0026rdquo;, a seemingly pointless API that would attempt to guess your binary gender based on a name. One user was quick to point out that they were identifed as female, until they added \u0026ldquo;Dr\u0026rdquo; as a prefix, at which point it regendered them male. When challenged on this, the developers completely washed their hands of it and said it was simply the data doing the talking, not their product. Genderify not surprisingly didn\u0026rsquo;t last long, presumably sinking with a wad of Ventre Capital money flushed down the toilet.\nOn a similar front in product, we had one of Intercom\u0026rsquo;s Product owners vomiting out an outrageous display of bravado on Twitter for a launch aimed directly at a competitor, Zendesk, about how terrible their product is and how amazing Intercom\u0026rsquo;s was. This misplaced chunk of my-Dad-is-bigger-than-yours was at least correctly handled by Intercom, who pulled the thread and apologised for getting the tone wrong.\nIn the Developer Relations space, Google decided to hide when one of it\u0026rsquo;s Advocates blew the whistle on a harrowing description of violent abuse at the hands of one of their other employees, presumably (at first) deemed too important to immediately fire.\nLocal to my tech ecosystem haunts, the Laravel framework found some new heroes in the form of the Larabelles usergroup, which was shot down by a load of predicable \u0026ldquo;replyguy\u0026rdquo; responses asking why there was a need for women to have their own usergroup, while seemingly unaware that the very nature of what they were doing was answering their own question. There has been a string of these recently, which in context this year isn\u0026rsquo;t particularly more than any other year going back to the dawn of software development, but it still irks. One of the points given to me by Michelle Sanver, former President of PHPWomen raised was that these sorts of things are becoming more prominent as women and LGBT developers are now more confident to speak out against such bigotry.\nDeveloper Relations and PR as a fifth pillar So, all of this raises an important feature of DevRel that I\u0026rsquo;ve not actually seen discussed at great length: PR. There are \u0026ldquo;Four pillars\u0026rdquo; of DevRel commonly cited, identified by Matthew Revell\u0026rsquo;s Hoopy consultancy in April 2019. These are:\n Outreach Community Product Education \u0026amp; Support  What these incidents are bringing to light is that Developer Relations practitioners are, in most cases, the face of the company they work for, and that is a big responsibility. There is harmony on both sides when it comes to DevRel - the company have their role representing them on stage at conferences and meetups, while experienced Developer Advocates have become massive influencers within the world of software development, and use that to promote the company.\nTake, for instance, the approach of how Developer Advocates are presented in Mary Thengvall\u0026rsquo;s DevRel Bible, \u0026ldquo;The Business Value of Developer Relations: How and Why Technical Communities Are Key To Your Success\u0026rdquo;. It presents, on the cover, illustrated likenesses of leading figures in DevRel who are interviewed in the book. The superstars appear to be us - that\u0026rsquo;s how much influence we\u0026rsquo;re supposed to be wielding.\nI can give you a personal example of this in action - take, for instance, Cassidy Williams moving to Netlify. Her trademark humour started to be teased out of the Netlify corporate Twitter account, and it was clear without announcing it that Cassidy was now using it. She\u0026rsquo;s a well known name in tech, and so personally now I associate Netlify (which hosts this site) with Cassidy, her skills and her humour and openness to being approached for advice. Sometimes Advocates (depending on their roles) are even first line support for a lot of developers they\u0026rsquo;ve formed relationships with.\nThat is indeed a lot more power than sometimes we\u0026rsquo;re aware of. If that\u0026rsquo;s the case, we really need a Fifth Pillar:\n Public Relations  Kindness \u0026amp; Influence for good We need that pillar in our arsenal of skills because it\u0026rsquo;s a bigger burden to carry than some of us might be aware of. Practitioners of DevRel do need to adhere to the \u0026ldquo;relations\u0026rdquo; part of the role, because if we misuse the platform we\u0026rsquo;re building for ourselves then we\u0026rsquo;re not advancing the industry as a whole - which is something that as influencers I believe we have the power to do. Misusing that platform or throwing controversy on top of it doesn\u0026rsquo;t go unnoticed: just ask \u0026ldquo;Uncle\u0026rdquo; Bob Martin, Greg Sidelnikov or Richard Stallman.\nAt NorDev Conference this year I saw Jon Skeet talk on Kindness, and I believe in Developer Relations empathy is a core skill we really should all have. It goes hand in hand with the responsibility of carrying that Public Relations profile of your employer - there\u0026rsquo;s something less for them to worry about if you carry out your education to other developers with kindness, patience and understanding of others. This goes beyond just patience with others' code skills - we\u0026rsquo;re leading by helping others regardless of race, religion or gender identity at a employer that also understands the same core values that we do. Hopefully.\nA curriculum I think what I\u0026rsquo;d like to see is PR awareness as part of DevRel; I\u0026rsquo;m not stating that we should all be PR experts (we already need to maintain enough skillsets across a broad range), because in DevRel personalities shine through. I\u0026rsquo;d say we don\u0026rsquo;t want to use PR as a tool to weather storms like companies and politicians do: the objective is the awareness to stop them in the first place.\nHow does one go about scoping what that looks like? Well, that I would like to discuss: feel free to hit me up!\nHere\u0026rsquo;s hoping for a kinder 2021.\n",
    "ref": "/blog/ethics/"
  },{
    "title": "About Me",
    "date": "",
    "description": "",
    "body": "Hi, I\u0026rsquo;m James! From Theatre Graduate, to QA, to SQL data analyst, to Business Intelligence Developer, to Web Developer, to Developer Advocate. From the stage and back to the stage, I sit in a happy medium between tech and theatre. I also pretended to be a DJ on the way.\nI founded Birmingham\u0026rsquo;s current PHP usergroup, brumPHP, and host/co-run a quarterly tech conference, Fusion Birmingham led by and founded by the Fusion Group.\nI do Developer Relations for the Laravel framework partner studio Jump24 in Birmingham, UK.\nI write and speak on PHP, Developer Culture and DevOps Tooling.\nI don\u0026rsquo;t like mumble rap.\n",
    "ref": "/about/"
  },{
    "title": "Turbocharged PHP Development with Xdebug, Docker & PHPStorm",
    "date": "",
    "description": "",
    "body": "**This article was written for my employer Jump24, you can read the original source article here.\nIt all started out with that oh-so-modern cause of a community backlash: the humble tweet.\nSource: https://twitter.com/derickr/status/1274134192155131905\nQuite the controversial “hot-take” from Derick, and while it certainly caused quite the stir (that it was probably designed to), it made me think. I thought, ‘Do I need to revisit Xdebug?’, and I realised that I’d fallen into Derick’s trap. But think I did.\nLet’s clear up some existing thoughts I had on Xdebug – some readers might nod in agreement or have/had similar experiences:\n  Like many PHP developers with significant experience: I know of Xdebug. It’s been around years – I started writing PHP professionally in 2016, by which time Xdebug had existed for 14 years. It’s not like it was some obscure or new tool being talked about.\n  I’d tried Xdebug before at some point – I can’t recall when, and had an experience that left me thinking that understanding what you could do with it would take far too much time up for me to learn. Plus, things like custom “bookmark” browser extensions made it feel like you had to jump through a lot of hoops to use it effectively. A lot has changed since I started – I use Jetbrains PHPStorm as my IDE, and develop with Docker. It was a pain trying to set it up manually before, but what about now, where Xdebug runs a server on an IP, but it will be running in Docker?\n  I’ve previously written an article on how superb PsySh is as an application’s command line. Given that when used as part of Laravel’s tinker it boots up the whole app into a REPL environment, does that render something like Xdebug somewhat redundant?\n  Lastly, but most importantly for developers: why bother when you can use var_dump() or Symfony’s dump() or Laravel’s dd()?\n  These thoughts of mine were also circulated in others’ replies to the tweet, but it was when Tighten’s Matt Stauffer and Twilio’s Gary Hockin stepped in to offer livestreams with Derick to set it up that I took notice – the resulting content is now excellently documented at https://learnxdebug.com with others’ contributions.\nSo, I thought: why not give it a go again? And so I did, going step by step though Gary and Derick’s video, with the goal to implement it into our development process for our Open Source project Awe-der.\nHow hard can it be? One of the things that most articles I’d read or tried to follow miss out one core thing that frustrated me: most have the “how”, but not the “why”. That is to say: what is this thing I’m doing and why does it work?\nBearing that in mind, here is how I implemented the stack, step by step with a little bit more info than just your average set of instructions.\nThe Stack  MacOS 10.15 (Catalina) PHPStorm 2020.1 PHP 7.4.4 (from official PHP Dockerfile) Docker 19.03.8 (engine) 1.25.5 (compose)  Step One: Installing Xdebug Part of what made the installation significantly easier for me was that the project it was being installed on was already using a Dockerfile as part of the stack. So, to install Xdebug, you need to include it with pecl (you can still -only- use pecl for operating system-level dependencies at the time of writing). Our project had this in our Dockerfile to install redis and imagick:\nRUN docker-php-source extract \u0026amp;\u0026amp; \\ pecl install redis \u0026amp;\u0026amp; \\ pecl install imagick \u0026amp;\u0026amp; \\ docker-php-ext-enable imagick \u0026amp;\u0026amp; \\ docker-php-ext-enable redis \u0026amp;\u0026amp; \\ docker-php-source delete It’s at this point you want to install it with pecl, so add pecl install Xdebug into the run commands for the container:\nRUN docker-php-source extract \u0026amp;\u0026amp; \\ pecl install redis \u0026amp;\u0026amp; \\ pecl install xdebug \u0026amp;\u0026amp; \\ pecl install imagick \u0026amp;\u0026amp; \\ docker-php-ext-enable imagick \u0026amp;\u0026amp; \\ docker-php-ext-enable redis \u0026amp;\u0026amp; \\ docker-php-source delete You can see the actual live Dockerfile (with the correct install command) at: https://github.com/awe-der/aweder-core/blob/release/table-ordering/docker/php/Dockerfile\nStep Two: Configuring Xdebug Before Docker, Xdebug was relatively straightforward to configure on a platform, in that it was a new set of the php.ini parameters – you’d either just edit the existing php.ini, or load in a custom ini or override. Now we’re running PHP and fpm in a container, so we need to inject the configuration in with docker-compose.\nFirst, create the file to inject and save it in the project root – let’s call it xdebug-local.ini.\nHere’s what to put in it:\nzend_extension=xdebug xdebug.remote_enable=1 xdebug.remote_autostart=1 xdebug.remote_port=9001 xdebug.remote_host=host.docker.internal I said this wouldn’t just be a copy and paste article, so: what are these parameters?\nZend_extension has always been the PHP ini file parameter name for adding in extensions – it hooks the pecl extension (or extensions installed with other tools like PEAR) installed to the runtime, so things like zip, redis, curl and the like use the same parameter to enable them.\nxdebug.remote_enable and xdebug.autostart are more interesting. Remember me mentioning “bookmarklets” in the browser earlier? You have to use an extension to keep a server connection alive with your Xdebug session – for example, for Firefox: https://addons.mozilla.org/en-US/firefox/addon/xdebug-helper-for-firefox/\nSound clunky? You bet. Is it required? Absolutely not. Enable remote triggering of the Xdebug server and set autostart to true when either a breakpoint is hit in the code or you’ve set the break to be at the entry point to your application’s code and: bingo. It triggers your debugging session. Do I wish I’d have known about this years ago? For sure.\nXdebug.remote_port has an interesting quirk in that if you don’t set the parameter, it defaults to port 9000. I guess it’s an interesting aspect that shows Xdebug’s history in that it was probably chosen as a default port before the CGI adopted replacement php-fpm used port 9000. So, it’s important to set the remote port to 9001 (or whichever free port you wish) to stop clashes.\nXdebug.remote_host is the point at which our Docker configuration starts making the process perhaps a little convoluted. In our case, we develop as a company with Macs, so it’s handy that Docker has a reserved handle (host.docker.internal) to route into the correct IP. Windows does the same at the time of writing, but Linux distributions might need a bit of research to get the correct address in here to connect into Docker.\nStep Three: Inject Config to Docker So, using docker-compose, we now inject the local ini file into the php container’s conf.d directory. The docker-compose file should look something like this:\nphp: container_name: my_container build: ./path/to/my/php/dockerfile environment: PHP_MEMORY_LIMIT: '128M' DB_HOST: 'mysql' DB_USER: 'root' DB_PASSWORD: 'root' DB_NAME: 'if_your_app_has_a_db' PHP_IDE_CONFIG: 'serverName=myapp.url' volumes: - ./:/var/www/vhost/:cached - ./xdebug-local.ini:/usr/local/etc/php/conf.d/xdebug-local.ini There are two things here to point out. Firstly, the docker volumes – it’s this line that’s going to enable Xdebug:\n./xdebug-local.ini:/usr/local/etc/php/conf.d/xdebug-local.ini The second one was a big gotcha: PHPStorm will need to match the incoming Xdebug server request to the webserver that’s set up in the IDE.\nPHP_IDE_CONFIG: 'serverName=myapp.url' I hadn’t actually set up the webserver on PHPStorm because I personally find a lot of the CLI and server setups for it extremely complex and hard to understand. But, because this environment variable is used to match to PHPStorm’s webserver setup, it cannot match the file structure without it – but more on that in a bit.\nIt’s time to check that Xdebug is working: rebuild your Docker stack\ndocker-compose build build \u0026amp;\u0026amp; docker-compose up -d\nAnd to check, debug by throwing phpinfo(); into an entrypoint to your app. Navigate to Xdebug on the page and you should see the following:\nStep Four: Set up PHPStorm I briefly mentioned that you need to set up your web server on PHPStorm first – so do that first. You can find pretty comprehensive and complete docs from Jetbrains on this here: https://www.jetbrains.com/help/phpstorm/creating-local-server-configuration.html#example1\nNow we get PHPStorm to listen to port 9001 which we set in the config. You can change that like so:\nPath mapping is important – PHPStorm has no way from the incoming request of knowing how the application is structured. Here’s an example of the configuration for Awe-der:\nThe absolute path on the server is what you need to change – make sure you change it to the root path served by your Docker stack (in our case, where nginx is serving the root of the application). This is an important step because PHPStorm assumes that the root directory from the incoming request is the public folder (if using either Symfony or Laravel). Make sure you also choose Xdebug as the debugger and use the appropriate HTTP port. Now, set PHPStorm to listen.\nIt’s time for the moment of truth: you’re listening for connections, you’re mapped, you’ve setup the Xdebug server: showtime. Add a breakpoint in PHPStorm (preferablly at the entry point of your app, so you know it’ll get hit), fire a request in the browser and IF everything is OK you’ll get an incoming connection from Xdebug in the IDE. Happy days if you did, don’t despair if you don’t: there are a lot of gotchas here. If nothing happens, the other tutorials at https://learnxdebug.com/ will probably have the answer.\nAs promised: Turbocharged Development So, here’s what you actually came here for, right? As with debugging in other interpreted languages, your start point will be a breakpoint (you can actually set PHPStorm to hit a breakpoint whenever a new file entry point is detected as well).\nHere’s a breakpoint set in our Awe-der project. We’re listening for connections – so, all being well we hit the Controller when loading the page, and hey presto! PHPStorm’s debugging pane appears.\nNow that we’re at a paused moment in the runtime, let’s check out what we can do.\nConsole / Evaluate expression You get a console that can run executable PHP within the runtime you’re in. That is… absolutely magic. Here’s an example of using the console live within Xdebug that will save you a mountain of var_dump() calls:\nPutting a variable straight into the console will print it, in exactly the same way that Javascript does it with console.log in a browser console.\nWe can change something on any variable at runtime in the console. Take for instance this line:\n$orderItem-\u0026gt;fill($apiPayload);\nThat’s Laravel’s Eloquent ORM. Why not see what happens at runtime when you do something else with it in the console?\n$orderItem-\u0026gt;toArray() ‌array ( 'order_id' =\u0026gt; 1, 'inventory_id' =\u0026gt; 2, 'variant_id' =\u0026gt; 1, ) $orderItem-\u0026gt;fill(['order_id' =\u0026gt; 234523523]); $orderItem-\u0026gt;toArray() ‌array ( 'order_id' =\u0026gt; 3333, 'inventory_id' =\u0026gt; 2, 'variant_id' =\u0026gt; 1, ) Done. We’ve just messed around with an entity on the fly.\nThe console has everything set \u0026amp; booted (assuming you’re using Composer’s autoload) to the point it’s activated – so crucially local scope variables are available. You can also navigate the stack as well via. the frames in the debugger. Laravel has pretty detailed stack traces when you use Blade, but they’re not interactive ones like we can get in the IDE:\nThis is next level debugging. You can navigate the frame pane to the left to view the executed stack. When you select a frame from it, the editor pane will navigate to the function call in the code and the variable pane will update to everything that has been set at that point. For big monolith stacks full of services and function calls all over the place, you’ve now got far more visibility. Pretty neat, huh?\nConditional Breakpoints An underrated feature is the ability to set breakpoints conditionally. For an example, let’s say that we only want to trigger the breakpoint to debug if an incoming request to a controller has a “search” term set.\nDone. Another joy of this in PHPStorm is that the Condition window behaves like any other console window, so you get application-wide autocompletion and local variable autocompletion.\nSo, if we hit the URL:\nLoads as expected, but add the search term in to the URL:\nhttps://awe-der.net/admin/dashboard?search=test\nWatchers Common debugging nightmares include mutable objects being hit -somewhere- in the stack. We have visibility of the stack, but that’s not much help when tracking a specific object. To set a watcher, add an expression in the watcher pane to the left. It will be evaluated with each step you trigger. A good example to see it in action would be the classic C loop:\npublic function testWatcher(): void { $variableToWatch = 45; for ($i = 1; $i \u0026lt; 5; $i++) { $variableToWatch = $variableToWatch + rand(0, 200); } } Set a watcher on $variableToWatch, and check out the watcher doing it’s magic just like any Javascript browser watcher as you step over the code:\nStep \u0026amp; Cursor controls: The five controls are as follows:\nStep over: run to the next line of code\nStep into: run into the next line, moving the cursor if entering a method call\nForce step into: same as Step into, but runs with calls into vendor/3rd party code for deeper debugging\nStep out: complete the current method and stop at the next line after the method that called it\nRun to cursor: For me, this is the most important one, and I’ll tell you why:\nIf you’re debugging something quite straightforward in that it’s your own code entirely, or something like the Slim framework with as little code as possible, stepping through the code is pretty logical. However, for those using a big framework – Laravel, Symfony, Cake, WordPress etc. there are calls, pipelines and event handlers all over the app. That magic has got to happen somehow, and if you try and step into it, you can see it in action.\nDon’t want to see all the handlers resolve? Cool. Move the cursor to the next line you want, so you can see the result piped into the variable frame. Hit run to cursor, job done. Probably the most important: modifying the output\nModifying the output is, in my opinion, what makes Xdebug so powerful. We’ve looked at the fact that you can change variables and interact with the code at runtime, but what hasn’t been mentioned is that if you instruct the debugger to complete, the output is the changed output. To see it in action, here are two use cases:\nBlade templates We have a variable named $dashboardMetrics that’s passed into our template for rendering. Here it is rendered:\nAnd, with a breakpoint set in the debugger, here is the payload printed out at the point it’s about to be loaded into the template:\nSo, I’m going to change “Processing” to 999. Hitting the breakpoint again, I’ll use the console to set it:\nOn the left hand side of the debugger pane you have the a “Resume Program” button. It allows you to complete the incoming request, so hit that and:\nRequest completed, you’ve modified runtime to change it.\nAPI calls Exactly the same logic applies to changing the output of an API request. Here I’m using Postman to get an entity via. A UUID:\nUsing the same method as the browser request, we’ll put a breakpoint into the API method and modify the output. Here’s the method response:\n(Protip for Laravel – don’t do this, always use Laravel Resources!)\nSo, at the breakpoint let’s change the entity making the available_time now instead of the dummy date using the Carbon library:\nResume runtime, and check out the result from Postman:\nMagic.\nI came into this with some thoughts and assumptions, so I’ll tie up my new experience with Xdebug in some key points that answer those questions. Conclusions\nQ: Why use Xdebug when you can var_dump()?\nA: Because it allows you to manipulate the runtime. If you use something like var_dump() you need to fire the CLI constantly or hit refresh on a browser over and over to get to the same point. Instead, you now have the chance to dynamically change and modify the stack – which is a big timesaver.\nQ: You mentioned PsySh, why not use that?\nA: Xdebug and PsySh are very different beasts. Whilst PsySh is labelled somewhat of a debugger, I don’t really treat it as such. It’s vital as a booted command line for your app, similar to manage.py for Django, but it’s not a pure debugger like Xdebug is.\nQ: This is still hard to set up still, isn’t it?\nA: I’d say it’s probably less of a mystery now that I’ve looked at it, and not as hard as most developers think. Plus the toolset for everyday use is so powerful, it’ll save you or your team a big chunk of valuable time and cognitive load.\nQ: Are there downsides to using Xdebug?\nA: The biggest downside I found was execution time. With the configuration in this article, the Xdebug server is always on – for a full PHPUnit test suite to run (if it’s pretty comprehensive) it will take a -big- performance hit. Luckily, there are workarounds for this in Docker, such as running commands with a custom ini to switch the Xdebug server off. If you’re in Production this is a real no-no.\nOverall, I’d say the tradeoff for time was well worth the effort. Something like this should be part of a developers’ tool chain – sure, it’s not always needed. If you’re doing an MVP in Laravel that’s mainly just CRUD operations, there’s probably not much justification for it.\nHowever, I’ve found that for many modern practises – comprehensive unit tests with large coverage from TDD, interface-based development and well-separated call stacks from considered single-responsibility principle controllers really do mean Xdebug gives you a decent edge.\nIf you’re working on a legacy application in Zend Framework 2 or 10,000 line controllers in someone’s 2006 bespoke framework and you’re not using Xdebug, I’d come to the conclusion that you love the punishment, and like it that way, you massochist.\nQ: What’s the outcome of trying it out?\nA: Development with TDD and Xdebug felt incredibly empowering, so we’re going to look to make it part of the default development environment \u0026amp; process.\nQ: How much does Xdebug cost?\nA: It’s free. Although, it depends on what the definition of “free” is – as it’s Derick’s Open Source project, it costs vast amounts of personal development time. If you want to try it out from reading this article (or you want to try it out with a different platform – check https://learnxdebug.com for other tutorials) then considering supporting his work: https://xdebug.org/support\nHappy debugging!\n",
    "ref": "/blog/on-meritocracy/"
  },{
    "title": "Turbocharged PHP Development with Xdebug, Docker & PHPStorm",
    "date": "",
    "description": "",
    "body": "**This article was written for my employer Jump24, you can read the original source article here.\nIt all started out with that oh-so-modern cause of a community backlash: the humble tweet.\nSource: https://twitter.com/derickr/status/1274134192155131905\nQuite the controversial “hot-take” from Derick, and while it certainly caused quite the stir (that it was probably designed to), it made me think. I thought, ‘Do I need to revisit Xdebug?’, and I realised that I’d fallen into Derick’s trap. But think I did.\nLet’s clear up some existing thoughts I had on Xdebug – some readers might nod in agreement or have/had similar experiences:\n  Like many PHP developers with significant experience: I know of Xdebug. It’s been around years – I started writing PHP professionally in 2016, by which time Xdebug had existed for 14 years. It’s not like it was some obscure or new tool being talked about.\n  I’d tried Xdebug before at some point – I can’t recall when, and had an experience that left me thinking that understanding what you could do with it would take far too much time up for me to learn. Plus, things like custom “bookmark” browser extensions made it feel like you had to jump through a lot of hoops to use it effectively. A lot has changed since I started – I use Jetbrains PHPStorm as my IDE, and develop with Docker. It was a pain trying to set it up manually before, but what about now, where Xdebug runs a server on an IP, but it will be running in Docker?\n  I’ve previously written an article on how superb PsySh is as an application’s command line. Given that when used as part of Laravel’s tinker it boots up the whole app into a REPL environment, does that render something like Xdebug somewhat redundant?\n  Lastly, but most importantly for developers: why bother when you can use var_dump() or Symfony’s dump() or Laravel’s dd()?\n  These thoughts of mine were also circulated in others’ replies to the tweet, but it was when Tighten’s Matt Stauffer and Twilio’s Gary Hockin stepped in to offer livestreams with Derick to set it up that I took notice – the resulting content is now excellently documented at https://learnxdebug.com with others’ contributions.\nSo, I thought: why not give it a go again? And so I did, going step by step though Gary and Derick’s video, with the goal to implement it into our development process for our Open Source project Awe-der.\nHow hard can it be? One of the things that most articles I’d read or tried to follow miss out one core thing that frustrated me: most have the “how”, but not the “why”. That is to say: what is this thing I’m doing and why does it work?\nBearing that in mind, here is how I implemented the stack, step by step with a little bit more info than just your average set of instructions.\nThe Stack  MacOS 10.15 (Catalina) PHPStorm 2020.1 PHP 7.4.4 (from official PHP Dockerfile) Docker 19.03.8 (engine) 1.25.5 (compose)  Step One: Installing Xdebug Part of what made the installation significantly easier for me was that the project it was being installed on was already using a Dockerfile as part of the stack. So, to install Xdebug, you need to include it with pecl (you can still -only- use pecl for operating system-level dependencies at the time of writing). Our project had this in our Dockerfile to install redis and imagick:\nRUN docker-php-source extract \u0026amp;\u0026amp; \\ pecl install redis \u0026amp;\u0026amp; \\ pecl install imagick \u0026amp;\u0026amp; \\ docker-php-ext-enable imagick \u0026amp;\u0026amp; \\ docker-php-ext-enable redis \u0026amp;\u0026amp; \\ docker-php-source delete It’s at this point you want to install it with pecl, so add pecl install Xdebug into the run commands for the container:\nRUN docker-php-source extract \u0026amp;\u0026amp; \\ pecl install redis \u0026amp;\u0026amp; \\ pecl install xdebug \u0026amp;\u0026amp; \\ pecl install imagick \u0026amp;\u0026amp; \\ docker-php-ext-enable imagick \u0026amp;\u0026amp; \\ docker-php-ext-enable redis \u0026amp;\u0026amp; \\ docker-php-source delete You can see the actual live Dockerfile (with the correct install command) at: https://github.com/awe-der/aweder-core/blob/release/table-ordering/docker/php/Dockerfile\nStep Two: Configuring Xdebug Before Docker, Xdebug was relatively straightforward to configure on a platform, in that it was a new set of the php.ini parameters – you’d either just edit the existing php.ini, or load in a custom ini or override. Now we’re running PHP and fpm in a container, so we need to inject the configuration in with docker-compose.\nFirst, create the file to inject and save it in the project root – let’s call it xdebug-local.ini.\nHere’s what to put in it:\nzend_extension=xdebug xdebug.remote_enable=1 xdebug.remote_autostart=1 xdebug.remote_port=9001 xdebug.remote_host=host.docker.internal I said this wouldn’t just be a copy and paste article, so: what are these parameters?\nZend_extension has always been the PHP ini file parameter name for adding in extensions – it hooks the pecl extension (or extensions installed with other tools like PEAR) installed to the runtime, so things like zip, redis, curl and the like use the same parameter to enable them.\nxdebug.remote_enable and xdebug.autostart are more interesting. Remember me mentioning “bookmarklets” in the browser earlier? You have to use an extension to keep a server connection alive with your Xdebug session – for example, for Firefox: https://addons.mozilla.org/en-US/firefox/addon/xdebug-helper-for-firefox/\nSound clunky? You bet. Is it required? Absolutely not. Enable remote triggering of the Xdebug server and set autostart to true when either a breakpoint is hit in the code or you’ve set the break to be at the entry point to your application’s code and: bingo. It triggers your debugging session. Do I wish I’d have known about this years ago? For sure.\nXdebug.remote_port has an interesting quirk in that if you don’t set the parameter, it defaults to port 9000. I guess it’s an interesting aspect that shows Xdebug’s history in that it was probably chosen as a default port before the CGI adopted replacement php-fpm used port 9000. So, it’s important to set the remote port to 9001 (or whichever free port you wish) to stop clashes.\nXdebug.remote_host is the point at which our Docker configuration starts making the process perhaps a little convoluted. In our case, we develop as a company with Macs, so it’s handy that Docker has a reserved handle (host.docker.internal) to route into the correct IP. Windows does the same at the time of writing, but Linux distributions might need a bit of research to get the correct address in here to connect into Docker.\nStep Three: Inject Config to Docker So, using docker-compose, we now inject the local ini file into the php container’s conf.d directory. The docker-compose file should look something like this:\nphp: container_name: my_container build: ./path/to/my/php/dockerfile environment: PHP_MEMORY_LIMIT: '128M' DB_HOST: 'mysql' DB_USER: 'root' DB_PASSWORD: 'root' DB_NAME: 'if_your_app_has_a_db' PHP_IDE_CONFIG: 'serverName=myapp.url' volumes: - ./:/var/www/vhost/:cached - ./xdebug-local.ini:/usr/local/etc/php/conf.d/xdebug-local.ini There are two things here to point out. Firstly, the docker volumes – it’s this line that’s going to enable Xdebug:\n./xdebug-local.ini:/usr/local/etc/php/conf.d/xdebug-local.ini The second one was a big gotcha: PHPStorm will need to match the incoming Xdebug server request to the webserver that’s set up in the IDE.\nPHP_IDE_CONFIG: 'serverName=myapp.url' I hadn’t actually set up the webserver on PHPStorm because I personally find a lot of the CLI and server setups for it extremely complex and hard to understand. But, because this environment variable is used to match to PHPStorm’s webserver setup, it cannot match the file structure without it – but more on that in a bit.\nIt’s time to check that Xdebug is working: rebuild your Docker stack\ndocker-compose build build \u0026amp;\u0026amp; docker-compose up -d\nAnd to check, debug by throwing phpinfo(); into an entrypoint to your app. Navigate to Xdebug on the page and you should see the following:\nStep Four: Set up PHPStorm I briefly mentioned that you need to set up your web server on PHPStorm first – so do that first. You can find pretty comprehensive and complete docs from Jetbrains on this here: https://www.jetbrains.com/help/phpstorm/creating-local-server-configuration.html#example1\nNow we get PHPStorm to listen to port 9001 which we set in the config. You can change that like so:\nPath mapping is important – PHPStorm has no way from the incoming request of knowing how the application is structured. Here’s an example of the configuration for Awe-der:\nThe absolute path on the server is what you need to change – make sure you change it to the root path served by your Docker stack (in our case, where nginx is serving the root of the application). This is an important step because PHPStorm assumes that the root directory from the incoming request is the public folder (if using either Symfony or Laravel). Make sure you also choose Xdebug as the debugger and use the appropriate HTTP port. Now, set PHPStorm to listen.\nIt’s time for the moment of truth: you’re listening for connections, you’re mapped, you’ve setup the Xdebug server: showtime. Add a breakpoint in PHPStorm (preferablly at the entry point of your app, so you know it’ll get hit), fire a request in the browser and IF everything is OK you’ll get an incoming connection from Xdebug in the IDE. Happy days if you did, don’t despair if you don’t: there are a lot of gotchas here. If nothing happens, the other tutorials at https://learnxdebug.com/ will probably have the answer.\nAs promised: Turbocharged Development So, here’s what you actually came here for, right? As with debugging in other interpreted languages, your start point will be a breakpoint (you can actually set PHPStorm to hit a breakpoint whenever a new file entry point is detected as well).\nHere’s a breakpoint set in our Awe-der project. We’re listening for connections – so, all being well we hit the Controller when loading the page, and hey presto! PHPStorm’s debugging pane appears.\nNow that we’re at a paused moment in the runtime, let’s check out what we can do.\nConsole / Evaluate expression You get a console that can run executable PHP within the runtime you’re in. That is… absolutely magic. Here’s an example of using the console live within Xdebug that will save you a mountain of var_dump() calls:\nPutting a variable straight into the console will print it, in exactly the same way that Javascript does it with console.log in a browser console.\nWe can change something on any variable at runtime in the console. Take for instance this line:\n$orderItem-\u0026gt;fill($apiPayload);\nThat’s Laravel’s Eloquent ORM. Why not see what happens at runtime when you do something else with it in the console?\n$orderItem-\u0026gt;toArray() ‌array ( 'order_id' =\u0026gt; 1, 'inventory_id' =\u0026gt; 2, 'variant_id' =\u0026gt; 1, ) $orderItem-\u0026gt;fill(['order_id' =\u0026gt; 234523523]); $orderItem-\u0026gt;toArray() ‌array ( 'order_id' =\u0026gt; 3333, 'inventory_id' =\u0026gt; 2, 'variant_id' =\u0026gt; 1, ) Done. We’ve just messed around with an entity on the fly.\nThe console has everything set \u0026amp; booted (assuming you’re using Composer’s autoload) to the point it’s activated – so crucially local scope variables are available. You can also navigate the stack as well via. the frames in the debugger. Laravel has pretty detailed stack traces when you use Blade, but they’re not interactive ones like we can get in the IDE:\nThis is next level debugging. You can navigate the frame pane to the left to view the executed stack. When you select a frame from it, the editor pane will navigate to the function call in the code and the variable pane will update to everything that has been set at that point. For big monolith stacks full of services and function calls all over the place, you’ve now got far more visibility. Pretty neat, huh?\nConditional Breakpoints An underrated feature is the ability to set breakpoints conditionally. For an example, let’s say that we only want to trigger the breakpoint to debug if an incoming request to a controller has a “search” term set.\nDone. Another joy of this in PHPStorm is that the Condition window behaves like any other console window, so you get application-wide autocompletion and local variable autocompletion.\nSo, if we hit the URL:\nLoads as expected, but add the search term in to the URL:\nhttps://awe-der.net/admin/dashboard?search=test\nWatchers Common debugging nightmares include mutable objects being hit -somewhere- in the stack. We have visibility of the stack, but that’s not much help when tracking a specific object. To set a watcher, add an expression in the watcher pane to the left. It will be evaluated with each step you trigger. A good example to see it in action would be the classic C loop:\npublic function testWatcher(): void { $variableToWatch = 45; for ($i = 1; $i \u0026lt; 5; $i++) { $variableToWatch = $variableToWatch + rand(0, 200); } } Set a watcher on $variableToWatch, and check out the watcher doing it’s magic just like any Javascript browser watcher as you step over the code:\nStep \u0026amp; Cursor controls: The five controls are as follows:\nStep over: run to the next line of code\nStep into: run into the next line, moving the cursor if entering a method call\nForce step into: same as Step into, but runs with calls into vendor/3rd party code for deeper debugging\nStep out: complete the current method and stop at the next line after the method that called it\nRun to cursor: For me, this is the most important one, and I’ll tell you why:\nIf you’re debugging something quite straightforward in that it’s your own code entirely, or something like the Slim framework with as little code as possible, stepping through the code is pretty logical. However, for those using a big framework – Laravel, Symfony, Cake, WordPress etc. there are calls, pipelines and event handlers all over the app. That magic has got to happen somehow, and if you try and step into it, you can see it in action.\nDon’t want to see all the handlers resolve? Cool. Move the cursor to the next line you want, so you can see the result piped into the variable frame. Hit run to cursor, job done. Probably the most important: modifying the output\nModifying the output is, in my opinion, what makes Xdebug so powerful. We’ve looked at the fact that you can change variables and interact with the code at runtime, but what hasn’t been mentioned is that if you instruct the debugger to complete, the output is the changed output. To see it in action, here are two use cases:\nBlade templates We have a variable named $dashboardMetrics that’s passed into our template for rendering. Here it is rendered:\nAnd, with a breakpoint set in the debugger, here is the payload printed out at the point it’s about to be loaded into the template:\nSo, I’m going to change “Processing” to 999. Hitting the breakpoint again, I’ll use the console to set it:\nOn the left hand side of the debugger pane you have the a “Resume Program” button. It allows you to complete the incoming request, so hit that and:\nRequest completed, you’ve modified runtime to change it.\nAPI calls Exactly the same logic applies to changing the output of an API request. Here I’m using Postman to get an entity via. A UUID:\nUsing the same method as the browser request, we’ll put a breakpoint into the API method and modify the output. Here’s the method response:\n(Protip for Laravel – don’t do this, always use Laravel Resources!)\nSo, at the breakpoint let’s change the entity making the available_time now instead of the dummy date using the Carbon library:\nResume runtime, and check out the result from Postman:\nMagic.\nI came into this with some thoughts and assumptions, so I’ll tie up my new experience with Xdebug in some key points that answer those questions. Conclusions\nQ: Why use Xdebug when you can var_dump()?\nA: Because it allows you to manipulate the runtime. If you use something like var_dump() you need to fire the CLI constantly or hit refresh on a browser over and over to get to the same point. Instead, you now have the chance to dynamically change and modify the stack – which is a big timesaver.\nQ: You mentioned PsySh, why not use that?\nA: Xdebug and PsySh are very different beasts. Whilst PsySh is labelled somewhat of a debugger, I don’t really treat it as such. It’s vital as a booted command line for your app, similar to manage.py for Django, but it’s not a pure debugger like Xdebug is.\nQ: This is still hard to set up still, isn’t it?\nA: I’d say it’s probably less of a mystery now that I’ve looked at it, and not as hard as most developers think. Plus the toolset for everyday use is so powerful, it’ll save you or your team a big chunk of valuable time and cognitive load.\nQ: Are there downsides to using Xdebug?\nA: The biggest downside I found was execution time. With the configuration in this article, the Xdebug server is always on – for a full PHPUnit test suite to run (if it’s pretty comprehensive) it will take a -big- performance hit. Luckily, there are workarounds for this in Docker, such as running commands with a custom ini to switch the Xdebug server off. If you’re in Production this is a real no-no.\nOverall, I’d say the tradeoff for time was well worth the effort. Something like this should be part of a developers’ tool chain – sure, it’s not always needed. If you’re doing an MVP in Laravel that’s mainly just CRUD operations, there’s probably not much justification for it.\nHowever, I’ve found that for many modern practises – comprehensive unit tests with large coverage from TDD, interface-based development and well-separated call stacks from considered single-responsibility principle controllers really do mean Xdebug gives you a decent edge.\nIf you’re working on a legacy application in Zend Framework 2 or 10,000 line controllers in someone’s 2006 bespoke framework and you’re not using Xdebug, I’d come to the conclusion that you love the punishment, and like it that way, you massochist.\nQ: What’s the outcome of trying it out?\nA: Development with TDD and Xdebug felt incredibly empowering, so we’re going to look to make it part of the default development environment \u0026amp; process.\nQ: How much does Xdebug cost?\nA: It’s free. Although, it depends on what the definition of “free” is – as it’s Derick’s Open Source project, it costs vast amounts of personal development time. If you want to try it out from reading this article (or you want to try it out with a different platform – check https://learnxdebug.com for other tutorials) then considering supporting his work: https://xdebug.org/support\nHappy debugging!\n",
    "ref": "/blog/xdebug-phpstorm/"
  },{
    "title": "The Dev Radio Episode 015",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+015.mp3 \nTracklist  Kaitlyn Aurelia Smith - First Flight [Western Vinyl, 2016] Ivor Cutler - I\u0026rsquo;m Walking to a Farm [Virgin, 1974] Mark B \u0026amp; Blade - Ya Don\u0026rsquo;t See The Signs [Source, 2001] Kate Rogers - Here Comes Your Man [Grand Central Records, 2005] Machine Woman - Have You Been To Salford Shopping Centre, Have You Seen Argos? [Take Away Jazz Records, 2019] David Axelrod - Holy Thursday [Capitol, 1968] Opeth - Dignity [Nuclear Blast, 2019] Shaun Ryder - Close The Dam [Self-Released, 2015] Handsome Boy Modeling School - A Day in the Life [Tommy Boy, 2004] Jungle Brothers - Because I Got It Like That (Ultimatum Mix) [Gee Street, 1990] Shimon \u0026amp; Andy C - Body Rock [Ram Records, 2001] David Holmes - Rip Rip [MCA, 1998] Sarah Brightman \u0026amp; Hot Gossip - I Lost My Heart to a Starship Trooper [Ariola Hansa, 1978] Gipsy Kings - Hotel California [Columbia, 1999] Elmer Fudd feat. Billy West - Grilled Cheese [Warner Bros, 2012] Fugazi - Give Me The Cure [Dischord, 1988] Plant Life - Two Beautiful Souls in a Crazy World [Counterflow, 2004] The Duke Spirit - Surrender [Friction, 2010] Beyond The Wizards Sleeve - Diagram Girl [Phantasy, 2016]  ",
    "ref": "/dev-radio/dev-radio-015/"
  },{
    "title": "The Dev Radio Episode 014",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+014.mp3 \nTracklist  Tim Blake - Midnight [Egg, 1977] Vessels feat. The Flaming Lips - Deflect the Light [Different Recordings, 2017] LV \u0026amp; Joshua Idenhen - New Pen [Keysound Recordings, 2014] Tom Zé - Jimmy, Renda-Se [Discos RGE, 1971] Kid Carpet - Bristol Carpet Factory [Tired \u0026amp; Lonesome, 2005] Kesha feat. The Dap-Kings Horns - Woman [Kemosabe Records, 2017] Stiltskin - Inside [White Water Records, 1994] Flying Lotus feat. Denzel Curry - Black Balloons Reprise [Warp, 2019] Japan - Adolescent Sex [Ariola Hansa, 1978] Maserati - Monoliths [Temporary Residence, 2009] The Selecter - Whip Them Down [Demon Records, 1994] Mammal Hands - The Falling Dream [Gondwana Records, 2016] Bob\u0026rsquo;s Burgers - Da Ding Ding [Sub Pop, 2017] DJ Supreme feat. Ice T \u0026amp; The Icepick - Arctic II [BackBone Records, 2017] Captain Sensible - Happy Talk [A\u0026amp;M, 1982] Dimensional Holofonic Sound - House of God (Jack Dangers Mix) [Shadow Records, 2001] Sporto Kantès - Fuckin' Country [Green United Music, 2013] Babymetal - Karate [Toy\u0026rsquo;s Factory, 2016] Justin Robertson\u0026rsquo;s Deadstock 33\u0026rsquo;s - If You Want To Get Into It [Skint, 2015] Blondie - Fun [BMG, 2017] Gala Drop - Let it Go [Golf Channel Recordings, 2014] Björk - All Is Full of Love (Plaid Mix) [One Little Indian 1999]  ",
    "ref": "/dev-radio/dev-radio-014/"
  },{
    "title": "The Dev Radio Episode 013",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+013.mp3 \nTracklist  Gorillaz - M1 A1 [Parlophone, 2001] Riz MC - Radar [Tru Thoughts, 2012] Scars - Horrorshow [Fast Product, 1979] Pixies - Make Believe [4AD, 2001] Easy Star All-Stars feat. Morgan Heritage - Electioneering [East Star Records, 2006] Trans AM - Outmoder [Thrill Jockey, 2004] Ekkohaus - Cry Baby [Morris Audio, 2009] Elephant Stone - Manipulator [Burger Records, 2016] Spoek Mathambo feat. Loui Lvndn - Landed [Teka Music, 2017] t.A.t.u. - How Soon is Now? [Interscope, 2003] Tocadisco \u0026amp; DJ Roland Clark - Wolves [Toca 45, 2016] Oceansize - Heaven Alive [Beggars Banquet, 2005] Matthew Halsall - The Traveller [Gondwana Records, 2019] Marty Robbins - Big Iron [Columbia, 1959] Regular Fries - The Girls [Junior Boy\u0026rsquo;s Own, 1998] Marcus Marr - Familiar Five [DFA, 2018] John Shuttleworth - One Cup of Tea is Never Enough (But 2 is 1 Too Many) [Free Range Product, 2017] Force Mass Motion vs. Dylan Rhymes - Hold Back [Acetate,2002] Stereo MC\u0026rsquo;s - Bring It On (Path To The Mind And The Soul And The Spirit) [Studio !K7, 2011] Lo Fidelity Allstars - Your Midnight [Corsair Records, 2009]  ",
    "ref": "/dev-radio/dev-radio-013/"
  },{
    "title": "The Dev Theatre Podcast Episode 001",
    "date": "",
    "description": "On Javascript & The Future with Stuart Langridge.",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Theatre+1.mp3 \nExpanding on his talk \u0026ldquo;You Really Don\u0026rsquo;t Need All That Javascript\u0026rdquo;, listen to Stuart and I chat about npm, dependency management, Deno, and standard libraries.\n",
    "ref": "/dev-theatre-podcast/dev-theatre-podcast-001/"
  },{
    "title": "The Dev Radio Episode 012",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+012.mp3 \nTracklist  Vangelis - Rachel\u0026rsquo;s Song [EastWest, 1994] Akira The Don - Blade Runner Theme [Living in the Future, 2017] Aguaturbia - Somebody to Love [Background, 1993] Mind Enterprises - Idol [Because Music, 2019] Caiman Super All Stars - Ban-Con-Tim [Caiman Records, 1984] Fat Jon \u0026amp; Styrofoam - Runnin' Circle [Morr Music, 2006] Mikey Dread - Give it a Chance [Dread At The Controls, 2002] Duran Duran Duran - Thacid Under [Power Vacuum, 2017] Tim Buckley - I Never Asked To Be Your Mountain [Elektra, 1967] Josefin Öhrn + The Liberation - I Can Feel It [Rocket Recordings, 2019] Kid Koala - Fender Bender [Ninja Tune, 2000] My Nu Leng - Levels [Black Butter Records, 2013] White Town - Your Woman 1917 [Bzangy Records, 2017] 120 Days - Come Out, Come Down, Fade Out, Be Gone [Smalltown Supersound, 2006] Paul Hardcastle - 19 [Chrysalis, 1985] Proxy - Raven (Live Edit) [Turbo, 2008] Tim Dog - Fuck Compton (Vocal) [Ruffhouse Records, 1991] Rodriguez - Only Good for Conversation [Sussex, 1970] Faultline - Where Is My Boy? [Elektra, 2002] Levellers - Edge of the World [China Records, 2000]  ",
    "ref": "/dev-radio/dev-radio-012/"
  },{
    "title": "Virtual onboarding during the COVID-19 crisis - time costing",
    "date": "",
    "description": "Have you structured your business ready for the challenge?",
    "body": "Almost every tech company is facing unprecedented challenges during the COVID-19 crisis, and at Jump24 it’s been no exception. The tech world has been switched to fully virtual overnight, which is bringing some very interesting debates forward (that I will discuss), most notably “how well is your business currently designed to deal with that?”\nI would argue that one of the biggest indicators of how well you’re set up to deal with this is onboarding new staff. As a Developer Advocate that endlessly discusses Developer Experience, what better test could there be for Jump24 than me starting out there?\nIt became clear that discussing my experience of onboarding virtually deals with a lot of hot topics across tech right now with the ongoing COVID-19 crisis, so let’s dive into each one.\nCommunications Communications are undoubtedly the first hurdle we face, and inevitably bring in the biggest blocker for remote working across the entire industry: trust.\nTrusting your developers to get on with what they’re doing and balancing hands off vs. micromanagement is absolutely vital. There are two factors that should determine your strategy for this:\n The experience levels of your developers Scale of company  If you are mentoring new developers, you have to make time for them. I see this time and time again, where product owners and CTOs have the domain knowledge the new developers need, but cannot access. Your new developers won’t succeed without this mentoring, remote or not; only now you have new developers at home unable to do anything as opposed to in the office and unable to do anything. If you’re in a larger organization, you must make sure you have the structure set up to be able to deliver that knowledge and mentorship, and review where the support is coming from.\nJump24 has made communication rules simple to adhere to:\n Morning standup All movements away from machine communicated on Slack Clockify removes the need for micromanagement Make time for each other (Skype calls, screenshare debugging) Always time for sprint retros \u0026amp; kickoffs  It seems so simple, doesn’t it? But that’s because it is! Companies such as Automattic have absolutely nailed down the way they communicate on Slack which is to be as explicit and verbal as possible. Providing we all stick to doing that, everything falls into place.\nTime spent learning Jump24’s Communications strategy: 5 mins.\nProject structure We know we should all be doing Agile, right?\nIt seems absolutely absurd that I’m writing this, but many companies still don’t practise Agile as standard. “You know what to do on this project, crack on until the shipping date”.\nIf you do not trust your developers to deliver work remotely, you’re presumably desperate to get everyone back into the office again. You might feel like you don\u0026rsquo;t have any visibility of what has been done or is left to do, and it could well be the root problem of why some businesses are struggling with the sudden switch to remote.\nThere’s a second part to working with Agile for development that is just as important: well defined, broken down stories.\nAt Jump24, tasks and stories are broken down into the exact specification to what they should contain with well thought out descriptions, source control is branched and organised accordingly, and thus the flow of work is already in place. Swap out the office to remote and nothing changes. Therefore, the onboarding experience onto a project from my experience went like this:\n Log into Jira Start working and submit your work for review.  That’s it.\nTime spent trying to get up to speed with the new project: 10 mins.\nTooling If you’ve not taken the time to get to grips with Docker or any sort of environment containerisation, my guess is that the shift to remote work has hit you hardest as you have to get each developer up to speed with a developer environment. I’ve heard arguments that it’s difficult to set up for larger projects, that it requires higher developer skill levels or that only DevOps folks can really do it.\nLike mentoring your inexperienced developers, the real barrier here is investing time. It is difficult to learn best practises in containerization - nobody should realistically be expected to pick up Kubernetes in 2 days. But, if you do get DevOps to take the time to set up a project’s environment correctly, you get an onboarding experience like mine.\nWe’ll get onto standards shortly, but there is also quality control tooling such as GrumPHP that doesn’t allow you to push your code if it sniffs code smells. Combined with Jump24’s TDD, this makes for a pretty supportive new development environment.\nTime spent trying to deploy new project to work on: 10 mins.\nStandards At Jump24, the work we deliver is key. Priority is given to making sure the code and structure is right. We adhere to PSR standards in our work and, as a Laravel partner, Laravel best practises.\nJohn Woods once wrote “Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.”, and I am a fan of this philosophy. Far too many are quick to dismiss this in favour of getting projects delivered on time, ASAP, but let’s be absolutely clear about what benefits having higher standards bring to your company:\n Long term client partnerships Ability to quickly scale delivered work Levelling up your developers  The last point is something I hold dear in my heart: if you deliver unchecked work “as long as it works” to a client for speed and money, its development team will not have learned anything. You’re putting those developers’ careers at a disadvantage.\nThe impact of remote working with adopted standards is that there’s no change. The developers know what to do. The project managers know what to do. The framework is already there, and the context with which it’s used doesn’t change. There’s no unexpected or confusing behaviour in the existing projects, because of best practices across all the developers, thus avoiding the “what was in this developer\u0026rsquo;s head at the time” problem.\nTime spent trying to understand standards used : 0 mins (I already knew them).\nDocumentation Everything is documented, because it’s the correct thing to do.\nWhat’s that, you’ve not been documenting stuff because you don’t have time? Oof!\nTime spent trying to work out undocumented features: 0 mins.\nSelf documenting code Going hand in hand with documentation is the mythical self-documenting code. Many say that this doesn’t exist, but the truth is that it does. Again, it boils down to putting time in to make sure this is the case - alongside standards and documentation at Jump24, debating exact function and variable naming and how interfaces are implemented is important. I’ve not had an onboarding experience as smooth as this because of self-documenting code actually doing what it says on the tin, and as a developer I can tell you it’s a delight. With no meetings to go through the structure of the codebase, it didn’t matter whether I was remote or on site.\nTime spent trying to work out arbitrary mystery code: 0 mins.\nCode Review There’s only one way you can keep the standards high, and that’s through Code reviews, though these are notoriously difficult to balance. In my case, there is the understanding within the team that the purpose of code review is exactly that. It can go hopelessly wrong when you throw egos into the mix, but the idea to make code review constructive is to understand the company culture beforehand.\nTime spent worrying the team are hammering me on code review: 0mins.\nTDD First Probably the most worrying part of onboarding onto a new team, especially when doing it remotely, is not having to experience that terrible fear that what you’re about to do is delete production by accident. Jump24 is TDD-first, specifically to avoid these kind of problems. There are two results of taking this direction:\n With other tooling such as Bitbucket Pipelines \u0026amp; GrumPHP: cannot push breaking changes to Production Upskilling developers with what should be standard practice industry-wide  There is a drawback to this: you have to invest the time to write and correctly implement TDD. But - when you do, it naturally falls into the onboarding process nicely.\nTimes I’ve broken Production: 0 // @TODO keep eye on this\nReputation \u0026amp; Culture One of the reasons that understanding the culture has taken so little time is, quite frankly, because the work has been put in long beforehand in my case. Jump24 firstly sponsored my community group BrumPHP, then I handed it over to them - it’s a company that gets how the PHP community works. By the time it came to virtually onboard here, I’d already spent the best part of two years in the Birmingham ecosystem discussing PHP matters with them. For most Developer Relations roles, the onboarding time is usually around a week off site to go through the fine detail of what the role is - by the time I’d started Jump24, I already knew.\nTime spent culturally onboarding: 0mins.\nIt’s understandably a pretty low score when it comes to time that my company has spent onboarding me, but that’s because the work has been put in place beforehand. We regularly throw out the things we should be doing in software development, but “never have the time”. I think the COVID-19 crisis we all face together as an industry is the final push we need to consider how important all of these things are, and if you\u0026rsquo;re ready and flexible with your staff, the payoff makes a massive difference.\nWhen times change, and we can come back into the office again: nothing changes in terms of how we work. I’m just looking forward to meeting my colleagues in person!\nTime spent enjoying work: All of it.\nWith thanks to Dan Newns, Jen Lambourne and Stuart Langridge\n",
    "ref": "/blog/onboarding-j24/"
  },{
    "title": "The Dev Radio Episode 011",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+011.mp3 \nTracklist  Michael Armstrong - Everything In Its Right Place [Rockabye Baby!, 2006] Nightmares on Wax - Deep Shadows (Moodymann Remix) [Warp, 2018] Aphrodite\u0026rsquo;s Child - The Lamb [Vertigo, 1972] DJ Format \u0026amp; Abdominal - Behind The Scenes (Savage Henry Remix) [AAF, 2017] Marilyn Manson - Torniquet [Nothing, 1996] Freq Nasty - Amped [Skint, 2003] Ananda Shankar - Dancing Drums [HMV, 1975] White Denim - Just Dropped In (To See What Condition My Condition Was In) [MGM, 2016] DJ Food - The Illectrik Hoax [Ninja Tune, 2011] Halsey, Big Sean \u0026amp; Stefflon Don – Alone (Calvin Harris Remix) [Astralwerks, 2018] Lee \u0026lsquo;Scratch\u0026rsquo; Perry - Bumpy Road of Life [Upsetter, 2018] Alabama 3 - W.O.M.B.L.E / This Is How We Build It [Hostage Music, 2013] DJ Shadow \u0026amp; Pusha T - Been Used Ta [Mass Appeal, 2019] Chaka Khan - Like a Lady [Island, 2019] David Brent \u0026amp; Foregone Conclusion - Equality Street [Caroline Records, 2016] Gabriel Ananda ‎- Süssholz [Basmati, 2011] Dodgy - U.K.R.I.P. [A\u0026amp;M, 1996] Lily Allen - Come On Then [Parlophone, 2018] Ray Noble And His Orchestra - Midnight, the Stars and You [Victor, 1934] Moby - God Moving Over The Face Of The Waters [Mute, 1995]  ",
    "ref": "/dev-radio/dev-radio-011/"
  },{
    "title": "The Dev Radio Episode 010",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+010.mp3 \nTracklist ",
    "ref": "/dev-radio/dev-radio-010/"
  },{
    "title": "The Dev Radio Episode 009",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+009.mp3 \nTracklist  Curved Air - Armin [Warner Bros. Records, 1973] Delia Derbyshire Appreciation Society - She Brought the Sun [Six Degrees Records, 2018] Miike Snow - Paddeling Out [Columbia, 2012] Jammer feat. Boy Better Know - 10 Man Roll [Big Dada, 2010] Shura - Side Effects (Jono Ma Cosmo Mix) [Secretly Canadian, 2020] Jon Kennedy - Return to Vysocina [Jon Kennedy Federation, 2020] Booth And The Bad Angel - Dance of the Bad Angels [Fontana, 1996] Hiem And Roots Manuva ‎– DJ Culture [Nang Records, 2013] GoGo Penguin - Atomised [Blue Note, 2020] Mel \u0026amp; Kim - Respectable (Alternative 12\u0026quot; Mix) [Cherry Pop, 2019] Ashford \u0026amp; Simpson - Bourgié Bourgié [Groovin Recordings, 2017] Amorphous Androgynous - The Chaser (Black Light Cinema Remix) [Monstrous Bubble Records, 2014] The Slits - I Heard It Through The Grapevine [Island, 1979] Battles - Hi/Lo [Monitor Records, 2004] Surgeon - Courage to Face Up To [Dynamic Tension Records, 2018] The Aloof - Sinking [EastWest, 1996] Fats Domino - When I\u0026rsquo;m Walking (Let Me Walk) [HMV, 1963] Alvvays - In Undertow [Transgressive Records, 2017] TOOL - Disposition [Volcano, 2001]  ",
    "ref": "/dev-radio/dev-radio-009/"
  },{
    "title": "The Dev Radio Episode 008",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+008.mp3 \nTracklist  Henrik Swartz \u0026amp; Bugge Wesseltoft - In Spite of Everything (Two Pianos) [Sunday-Music, 2020] Aim - Walking Home Through The Park [Atic Records, 2006] Casi - The Beast [Chess Club, 2017] Otzeki - Pay the Tax [Discophorus, 2018] Finitribe - 101 (Sonic Shuffle Edit) [One Little Indian, 1992] The Atomic Bitchwax - Crazy [Tee Pee Records, 2017] Alex Dolby - Hazy Way (Evil9 Remix) [Mantra Vibes, 2005] Gong - Heavy Tune [Virgin, 1978] Public Image Limited - Deeper Water [PiL Official, 2012] Talib Kweli \u0026amp; Hi Tek- Africa Dream [Rawkus, 2000] General Levy, Wayne Smith, Skarra Mucci, Brother Culture - Dancing Machine / Killing Machine [Evidence Music, 2019] Pet Shop Boys - Surburbia [Parlophone, 1986] The Coasters - Yakety Yak [ATCO Records, 1958] The Juan Maclean - Get Down (With My Love) [DFA, 2014] Alesha Dixon - The Boy Does Nothing [Asylum Records, 2008] Kursiva - Give It To Me [PSychoDynamiK, 2017] Michael Kiwanuka - You Ain\u0026rsquo;t the Problem [Polydor, 2019] Fantom \u0026lsquo;87 - Pay Phone [Self-released, 2017] Yppah - Bushmills [Counter, 2015] Le Orme - Ad Gloriam [Car Juke Box, 1969]  ",
    "ref": "/dev-radio/dev-radio-008/"
  },{
    "title": "The Dev Radio Episode 007",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+007.mp3 \nTracklist  Lights out Asia - These Worlds are Yours [n5MD, 2010] !!! - Freedom \u0026lsquo;15 [Warp, 2015] Unkle - Arms Length [Songs for the Def, 2017] Ozric Tenticles - Zingbong [Madfish, 2015] Earl Hooker - 2 Bugs and a Roach [Arhoolie, 1969] Rennie Pilgrem - Drop It (Original Extended) [TCR, 2013] Pachyman - 333 House [Mock Records, 2020] The Traffic - White Lines (Don\u0026rsquo;t Do It) [Choi Records, 2016] Farrah Abrham - Unplanned Parenthood [Self-released, 2012] Melody\u0026rsquo;s Echo Chamber - Shirim [Domino, 2018] Horsepower Productions - Water [Tempa, 2010] Warpaint - New Song [Rough Trade, 2016] Vuelveteloca - Cientologia \u0026amp; Altiplano [Fuzz Club Records, 2017] Chas \u0026amp; Dave - Rabbit [Rockney, 1980] King Adora - Suffocate [Superior Quality Records, 2001] Soweto Kinch - The Gaming House [Soweto Kinch, 2019] Jagwar Ma - OB1 [Future Classic, 2016] Juice Aleem - Higher Higher [Big Dada, 2009] The Wings - We\u0026rsquo;ll Get You Home [Soul Jazz, 2017] The Polyphonic Spree - Section 33 (You Don\u0026rsquo;t Know Me) [Good Records, 2013] Malcolm Middleton - Little Hurricane [Nude Records, 2016]  ",
    "ref": "/dev-radio/dev-radio-007/"
  },{
    "title": "The Dev Radio Episode 006",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+006.mp3 \nTracklist  Homin Lviv Municipal Choir - Vichnaya Pamyat [Deutsche Grammophon, 2019] Darren Korb - Build That Wall (Zia\u0026rsquo;s Theme) [Supergiant Games, 2017] Grace - Skin on Skin [Perfecto, 1995] Soulsavers - Death Bells [V2, 2009] Erasure - Love to Hate You [Mute, 1991] Prince Far I - Tired Fe See The Mothers Cry [Tamoki Wambesi, 1994] Gulp - Morning Velvet Sky (Richard Norris Mix) [E.L.K. Records, 2017] Divine Styler - Def Mask [Gamma Proforma, 2014] Simon Baker - Plastik (2014 Mix) [Kompakt, 2014] Nas \u0026amp; Damian Marley - As We Enter [Ghetto Youths United, 2010] Optiv + CZA - In Too Deep, [Hospital, 2012] Liam Lynch - United States of Whatever [Global Warming, 2002] Busta Rhymes - Turn It Up (Remix) / Fire It Up [Elektra, 1998] 77:78 - Love Said (Let\u0026rsquo;s Go) (Ashley Beedle\u0026rsquo;s North Street Vocal) [Heavenly, 2018] Fingathing feat. Jessica Hoop - I Feel Love [Tru Thoughts, 2015] Jah Wobble \u0026amp; Keith Levene - Understand [Cherry Red, 2012] Airiel - Inside Out [Shelflife Records, 2017] △▃△▓ - ░▓░▓░▓░▓░▓░▓░▓░▓░▓░▓░▓░▓░▓ [ㅇOO, 2017] Manic Street Preachers - Futurology [Columbia, 2017] New Order - Crystal (2011 Total Mix) [Rhino, 2011] Dan Le Sac feat. Merz - Long Night of Life [Sunday Best Recordings, 2012]  ",
    "ref": "/dev-radio/dev-radio-006/"
  },{
    "title": "Talk - The Politics of Tool Shaming",
    "date": "",
    "description": "UK Tour on how to hamstring your business with elitism.",
    "body": "Most of us have heard it at some point. \u0026ldquo;WHAT? You use X framework/tool/OS/language?! So\u0026hellip; you\u0026rsquo;re a bad developer then?\u0026rdquo;\nI did not come from a Software Development background into this industry. I was an outsider, but it\u0026rsquo;s what I wanted to do my whole life. This is my story: how I refocused and retrained in my career to be confronted with a nightmare of gatekeeping, elistism and aggression. I saw what I thought was a problem, and I\u0026rsquo;d like to propose a solution.\nWhat we do is hard. We\u0026rsquo;re in a young industry full of contradictions and opinions, and sometimes it excludes people, it shapes new developers' attitudes poorly and it causes people to walk away. In this talk I\u0026rsquo;ll focus on what I\u0026rsquo;ve experienced, what others have experienced, what is harmful to your business with this culture and what can be done about it.\nPS. I don\u0026rsquo;t care about emacs or vim. Can you ship it?\nBro, do you even code? The Politics of Tool-Shaming - Dates:\n- 2019-06-18: brumJS, Birmingham\n- 2019-07-04: PHP London, London\n- 2019-08-08: PHPMiNDS, Nottingham\n- 2019-09-11: PHPSW, Bristol\n- 2019-10-02: NorDev, Norwich\n- 2019-10-23: Worcester Source, Worcester\n- 2019-11-18: CraftyCoders, Coventry\n- 2020-01-21 Wordpress Birmingham, Birmingham\n- 2020-01-30 FES, Sheffield\n- 2020-02-20 LeicesterJS, Leicester\n- 2020-02-26: ACCU, CodeNode@SkillsMatter, London (Cancelled)\n- 2020-02-28: NorDev Conference, Norwich\n Below is a recording of the talk\u0026rsquo;s debut at BrumJS, Birmingham on 2019-06-18, courtesy of Civico (http://www.civicolive.com):\nUse an HTML5 video tag compatible browser to view this video.  ",
    "ref": "/blog/tool-shaming/"
  },{
    "title": "The Dev Radio Episode 005",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+005.mp3 \nTracklist  The Gordon Highlanders - Regimental March [Perfect, 1960] The Big Pink - Too Young to Love [4AD, 2009] Atari Teenage Riot - Reset [Digital Hardcore Recordings, 2015] Har Mar Superstar - EZ Pass [Record Collection, 2002] Lana Del Rey - Blue Jeans (Gesaffelstein Remix) [Interscope, 2012] Ana Tijoux - Somos Sur [Nacional Records, 2014] Panda Bear - Butcher Baker Candlestick Maker [Domino, 2015] Blackash - Anthropocene [Swordfish Records, 2016] Mungo\u0026rsquo;s Hi Fi \u0026amp; Charlie P - Alphabet [Scotch Bonnet, 2015] Ivory Wave - Gold [Self-released, 2019] Tears for Fears - My Girls [INgrooves, 2014] Goldie - I Adore You (Total Science Remix) [Metalheadz 2017] Jane Weaver - The Architect [Fire Records, 2017] Luke Vibert - Acid 2000 [Planet Mu, 2002] ID - Acid 3000 [Label Worx, 2017] Fatboy Slim - Acid 8000 [Skint, 1998] Cid Rim feat. Samantha Urbani - Repeat [LuckyMe, 2017] Brand Nubian - Slow Down [Elektra, 1990] Mint Royale with Lauren Laverne - Don\u0026rsquo;t Falter [Faith \u0026amp; Hope Records, 2000] Souja Boy - Soulja Boy Tell Em (Cousin Cole Remix) [Unreleased] Shellac - Dude Incredible [Touch And Go, 2014] Gonzales - Take Me To Broadway [Kitty-Yo, 2003] Amorphous Androgynous ‎– The Mello Hippo Disco Show [Future Sound Of London Recordings, 2002]  ",
    "ref": "/dev-radio/dev-radio-005/"
  },{
    "title": "PsySh - More than just REPL",
    "date": "",
    "description": "A wildly underused tool for a full application shell.",
    "body": "Most backend developers know about interactive modes, that certainly isn’t a secret.\njimseconde@jim-amd-u18$: php -a\njimseconde@jim-amd-u18$: node\njimseconde@jim-amd-u18$: python3\nAll give you an active interpreter for that respective language. It’s used mostly for testing or confirming behaviour on the fly - ironically because you have a mountain of code in the middle of your app, your linter isn’t picking up on anything suspicious and exceptions are being thrown where you don’t want. Perhaps you want to look at how something is type juggling instead - again, your linter can’t help you with that.\nPHP jimseconde@jim-amd-u18$: php -a \u0026gt; $foo = '342'; \u0026gt; $bar = 'give me a string'; \u0026gt; var_dump($foo + $bar); Node jimseconde@jim-amd-u18$: node \u0026gt; console.log(234 / 3) Python3 jimseconde@jim-amd-u18$: python3 \u0026gt; print('give me a string' . 3424) While an active interpreter is useful, it has one major limitation: it’s the standard library of functions of a language, not a framework or your whole application\u0026rsquo;s code. So we’d have to import anything we want to test line by line:\nNode jimseconde@jim-amd-u18$: node \u0026gt; barkNoise = 'woof' \u0026gt; console.log(bark(barkNoise)) ReferenceError: bark is not defined \u0026gt; import { bark } from './app/some_functions/myFunctions.js' \u0026gt; console.log(bark(barkNoise)) woof PHP: How PSR-4 \u0026amp; Composer changed how we code in PHP While it looks like a daunting name, PSR-4 is just the specification for how code is structured, allowing a modular component system in your php app. At runtime, composer uses an autoloader system to get every class you’ve got in your app and loads it into that php thread in memory. This is why when you code something in, for example, Slim, Laravel or Symfony, you can use an import to get a class from -somewhere else- in your app, and because of autoloading, it’s available during runtime.\nFrom PHP interactive shell to PsySh We’ve already established that php -a just spins up a raw shell. But - what if we could spin up a shell that uses composer’s autoloader to throw the whole app into memory, then gives you your command line? If you did that, every single class and all the functionality of your app sudden becomes available!\nThis is exactly what PsySh does. In Symfony or Slim, you can get it using composer: composer require psy/psysh. In Laravel, a version of it comes out of the box, named tinker. You can fire it up using php artisan tinker.\nIt\u0026rsquo;s also worth noting that in tinker, not only has composer autoloaded every class, it\u0026rsquo;s also fired Laravel\u0026rsquo;s entry point to the app, including all of the bootstrapped features - so, features like the Service Container and Config are available:\njimseconde@jim-amd-u18$: php artisan tinker \u0026gt;\u0026gt;\u0026gt; config('app.my_awesome_variable'); \u0026gt;\u0026gt;\u0026gt; $myPusherService = app()-\u0026gt;make('PusherService'); \u0026gt;\u0026gt;\u0026gt; $myPusherService-\u0026gt;pushToQueue(['send me']); More than debugging: 4 use cases PsySh is usually described as a debugger, but I’d say it’s a lot more powerful than that. Let’s have a look at four areas it can be used to interact with our apps:\nShopify API library In previous blog posts, I\u0026rsquo;ve written how to use composer to get a REST API wrapper.. The wrapper is used to fetch and push whatever your app requires in its business logic to interact with a Shopify store (in this case). It’s baked into your app’s code though, so using something like Postman or Insomnia to manually query the API would be better suited for quick queries. With PsySh though, the API is now -just available-. Even better, you may have extended the API wrapper with bespoke functionality - now that’s available too. For example:\njimseconde@jim-amd-u18$: php artisan tinker \u0026gt;\u0026gt;\u0026gt; $api = new \\EastsideCo\\Shopify(); \u0026gt;\u0026gt;\u0026gt; $shopifyProduct = $api-\u0026gt;get('admin/products/324235.json')-\u0026gt;products; \u0026gt;\u0026gt;\u0026gt; $localProduct = new \\App\\Product::create($shopifyProduct); \u0026gt;\u0026gt;\u0026gt; $localProduct-\u0026gt;save(); You\u0026rsquo;ll notice that PsySh also gives you interactive feedback. If you call the Eloquent save() function for instance, as long as the entity passes validation, it will return and print true below. In the case of an API response or the result of a database query, it\u0026rsquo;ll return and print a json array of the response, even if it\u0026rsquo;s been set to a variable.\nYour API class instance is generated the same way it would have been if you were running the whole application at runtime (because, as everything has been loaded in PsySh, technically this is exactly what has happened). So, whatever custom methods you’ve coded are now available - for example:\n\u0026gt;\u0026gt;\u0026gt; $blogPayload = ['09012938','My new blog post']; \u0026gt;\u0026gt;\u0026gt; \\App\\API::createBlogPost($blogPayload); true \u0026gt;\u0026gt;\u0026gt; $api-\u0026gt;fetchImagesByVariantId('90812309') Laravel’s Eloquent ORM interaction The main usage you’ll see of Laravel’s inclusion of PsySh is in the ORM documentation, and it’s a good example of where it’s extremely powerful. With the ORM loaded completely into your command line, you can use any extended custom functionality you’ve built into your ORM and test it. This now effectively completely removes the need to access your database’s command line - you can even write raw SQL into the ORM and run that.\nExamples:\njimseconde@jim-amd-u18$: php artisan tinker \u0026gt;\u0026gt;\u0026gt; \\DB::select(SELECT * FROM products WHERE id = 4)-\u0026gt;get(); \u0026gt;\u0026gt;\u0026gt; \\App\\Product::find(342) \u0026gt;\u0026gt;\u0026gt; \\App\\Variants::where('sku', 'like', 'TABLE1')-\u0026gt;get(); Laravel’s Storage driver Here’s another example of where PsySh can be really powerful. Every Laravel class that comes with the Framework is now available - so, let’s take the File Storage system that is built on top of the powerful Flysystem PHP library. Let’s imagine you need to extract a specific SQL query for data analysis.\n\u0026gt;\u0026gt;\u0026gt; $dataQuery = \\DB::('SELECT a.id, a.title, b.title, b.price, b.sku from products a INNER JOIN variants b on a.id = b.product_id')-\u0026gt;get(); \u0026gt;\u0026gt;\u0026gt; // $dataQuery is a select query returned as a .json \u0026gt;\u0026gt;\u0026gt; // dump out the data to the storage path \u0026gt;\u0026gt;\u0026gt; \\Storage::disk('local')-\u0026gt;put('datadump.json', $dataQuery); On your server, your query result json is now written to /storage/app (if you’ve still using the defaults, otherwise it will be written to the configured path for the local driver).\nWe’ve just the local driver here, but if you want to you can use any of the other drivers - such as the AWS S3 one. Want to send the same payload into an S3 bucket? Sure!\n\u0026gt;\u0026gt;\u0026gt; \\Storage::disk('s3')-\u0026gt;put('datadump.json', $dataQuery); Dispatching Jobs or Events If your app makes extensive use of the Job queue system (currently I use AWS’s SQS messaging system for Job queues, and use Redis for broadcasting events over websockets) or has a more a complex Event-driven architecture system, you can use PsySh to do routine maintenance or to debug the application structure. Here’s an example of fetching an order by the API, then firing an event to the queue listeners:\n\u0026gt;\u0026gt;\u0026gt; $orderToCancel = $api-\u0026gt;get('admin/orders/32448.json'); \u0026gt;\u0026gt;\u0026gt; // fire event to the queue to cancel the job \u0026gt;\u0026gt;\u0026gt; Event::dispatch(new CancelOrderJob($orderToCancel)); I\u0026rsquo;ve found the power of an interactive shell like this to be invaluable in day-to-day operations. For more information on PsySh and tinker, check out the docs and repos:\nhttps://psysh.org/\nhttps://github.com/bobthecow/psysh\nhttps://github.com/laravel/tinker\nTo see an example of the same kind of enhanced REPL power outside of PHP, I recommend having a look at how Python\u0026rsquo;s Django implements the same patterns using ./manage.py shell_plus --ipython.\nHappy shelling!\n",
    "ref": "/blog/psysh/"
  },{
    "title": "The Dev Radio Episode 004",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+004.mp3 \nTracklist  Max Richter - Spring 1 [Deutsche Grammophon, 2014] Slowdive - Star Roving [Dead Oceans, 2017] BadBadNotGood - Confessions Pt. II [Innovative Leisure Records, 2016] V-Ice - Hate [Liquid 8, 2001] Black Mountain - Horns Arising [Jagjaguwar, 2019] Redlight - City Jams [Hot Haus Recs, 2017] The Flaming Lips - Race for the Prize [Warner Bros, 1999] DJ Vadim ‎ - Lemon Haze [BBE, 2012] Mauro Picotto - Lizard (Picotto Mix) [BXR, 1997] Blackalicious - That Night [OGM Recordings, 2015] Hypnotic Brass Ensemble - Alyo [Honest Jon\u0026rsquo;s Records, 2009] KH - Only Human [Ministry of Sound, 2019] Orchestre D\u0026rsquo;Harmonie de Lille-Fives feat. Monoblok - The Sky Was Pink (James Holden Remix) [Babaorum Records, 2013] Harry Belafonte - Jump in the Line (Shake, Senora) [RCA Victor, 1961] Mysterons - Bug Powder Dust [Excelsior Recordings, 2017] Sky Ferreira - Everything is Embarrssing (Unknown Mortal Orchesta Remix) [Capitol Records, 2014] The Horrors - Something to Remember Me By [Wolf Tone, 2017]  ",
    "ref": "/dev-radio/dev-radio-004/"
  },{
    "title": "The Dev Radio Episode 003",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+003.mp3 \nTracklist  Mark Pritchard - The Arched Window [Warp, 2018] Leon Vynhall - I, Cavallo [Ninja Tune, 2019] Yamasuki - Yama Yama [Biram, 1971] Little Boots - The Game [Dim Mak Records, 2015] Run The Jewels - Panther Like a Panther [Run The Jewels Inc, 2016] North Atlantic Oscillation - Glare [KScope, 2016] Camera Obscura - French Navy [4AD, 2009] Poket Trez \u0026amp; Enbe - Spit [Strangetown Records, 2014] Gang Gang Dance - Lotus [4AD, 2018] \u0026hellip;And You Will Know Us By The Trail Of Dead - Into the Godless Void [Dine Alone, 2020] The Manor - SWAZZ [EMI, 2019] Errors - Magna Encarta [Rock Action, 2011] Cut Chemist - Work My Mind [A Stable Sound, 2017] The Black Family - The Motorway Song [Dara Records, 1986] Viagra Boys - Sports [Year0001, 2018] Traffic - Feelin' Alright? [Island, 1968] Kenickie - In Your Car [Parlophone, 1997] Let\u0026rsquo;s Eat Grandma - It\u0026rsquo;s Not Just Me [Transgressive, 2018] Makeness - Loud Patterns [Secretly Canadian, 2018] Donald Byrd - Dominoes [Blue Note, 1975] Mystery Jets - Bubblegum [Caroline Records, 2016]  ",
    "ref": "/dev-radio/dev-radio-003/"
  },{
    "title": "Beginning Journeys",
    "date": "",
    "description": "Sparking up a career, a passion and a speciality.",
    "body": "Sparking up a career, a passion and a speciality.\nIt\u0026rsquo;s been a long time coming, but we\u0026rsquo;re finally here: a site to contain my writing in the world of tech and info on my speaking.\nI already have a few subjects in my head right now, so will gradually get content out from my existing writing with my current employer and an in-depth article on the subject of my current UK talk on elisitm/gatekeeping in the world of tech.\nThanks go out to the excellent Ryan Fitzgerald for his great starter framework for a basic blog in GatsbyJS. While this site is a fork of it, I\u0026rsquo;ll gradually customise and refactor it over time to add new features, but as a starter to the slightly steep learning curve of Gatsby it\u0026rsquo;s been fantastic. Once Gatsby\u0026rsquo;s power of React components compiling, Markdown parsing when building and it\u0026rsquo;s brilliant GraphQL API Data layer is on show, it really is an eye opener for what static site generators can achieve.\n",
    "ref": "/blog/beginning-journeys/"
  },{
    "title": "The Dev Radio Episode 002",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+002.mp3 \nTracklist  Brad Derrick - Moons of Evening Star [Bethesda Softworks Inc, 2014] Visage - Fade to Grey (Orchestral) [August Day Recordings, 2014] Matters - The Square [Static Caravan, 2019] Adriano Celentano - Prisencólinensináinciúsol [Clan Celentano. 1972] Earl 16 - Children of the Most High [Sound of Thunder, 2018] Vladimir Cauchemar - (G)rave [Lokomotiv Sound, 2019] Spice Girls - Stop (Strech \u0026lsquo;n\u0026rsquo; Vern\u0026rsquo;s Rock n Roll Dub) [Virgin, 1998] Cradle of Filth - Temptation [Roadrunner, 2006] Flowdan - Shell a Verse [Tru Thoughts, 2018] Sunforest - And I Was Blue [Deram, 1969] Paul Draper - Who\u0026rsquo;s Wearing The Trousers (Live) [Kscope, 2018] Half Man Half Biscuit - Asparagus Next Left [Probe Plus, 2005] Cilla Black - Dancing in the Street [Parlaphone, 1965] Kelly Lee Owens - Let It Go [Smalltown Supersound, 2019] The Specials - 10 Commandments [Island, 2019] 2 Lone Swordsman - Shack 54 [Rotters Golf Club, 2007] Lyn Collins - Think (About It) [Mojo, 1972] William Oneyearbor - Fantastic Man [Luaka Bop, 2013] The Joubert Singers - Stand on the Word [Next Plateau Records Inc, 1985] Cocteau Twins - Iceblink Luck [4AD, 1990]  ",
    "ref": "/dev-radio/dev-radio-002/"
  },{
    "title": "How to Build a Vue.js Shopify Frontend App with Polaris",
    "date": "",
    "description": "Continuing to build integrations with Shopify, using Polaris & Vue.js",
    "body": "This article was originally written by me for Eastside Co\u0026rsquo;s blog: you can find the original here\nNote: this article is about building a Vue.js single page app on top of the Laravel app created in this article. Before reading this, make sure you’ve read the previous article about building an app with Laravel as we’ll be using that existing code.\nWhat is Vue.js? Vue.js is a JavaScript front end framework, comparable to similar frameworks such as React and originally derived from AngularJS. Compared to the other frameworks, it’s designed to be somewhat lighter, so that you can use it as just a presentation layer only if you wish - but can you can also scale it massively with full state management or use a framework on top of Vue such as Nuxt.js. You can find out more info about Vue.js here.\nWhat is Polaris? Polaris is Shopify’s UI design framework, comparable to other UI frameworks such as Bootstrap or SemanticUI. At Eastside Co we have a Vue.js port of the library for a consistent UI in our apps.\nSetting up Vue.js for compiling Vue comes with Laravel out of the box, but there are some customisations that will make development easier. Laravel comes with Laravel Mix which is a neat wrapper around Webpack. Webpack compiles all of your frontend assets down to what you want to serve to the client’s browser - Laravel comes with an implementation of this with lots of defaults baked-in. Let’s optimise Webpack’s output a little. Open webpack.mix.js in your project’s root. Change it to:\nmix.js('resources/js/app.js', 'public/js') .sass('resources/sass/app.scss', 'public/css'); mix.webpackConfig({ resolve: { extensions: [ '.js', '.vue', ], alias: { '@': path.resolve(__dirname, 'resources/assets/js'), }, }, devtool: “inline-source-map” }); Here we’ve told webpack to alias files within the resources/assets/js folder for use in import statements, and to recognise .vue and .js extensions so that we don’t need to use full filenames in JavaScript. The devtool option also makes wepack generate source maps for our compiled JS to aid debugging in the browser faster.\nWe can now run npm to install our front end dependencies, and run a server to watch for changes to our JavaScript files. Head to the terminal and type:\nnpm install\nnpm run dev\nNow, we need to hook our base Laravel route into our Vue app.\nSetting up Vue.js in Laravel We need to to a little tweaking in order to get a decent scaffold from Laravel to Vue. The first things we need to do are to import Vue into a base Twig template, then create an entry point for our app.\nSo that we don’t confuse things, let’s create a new route, controller method and twig template.\nroutes/web.php\nRoute::get('/vueapp', 'ShopifyController@vueapp'); app/Http/Controllers/ShopifyController.php\npublic function vueapp() { return view('vueapp'); } As Vue is going to use an endpoint we create in Laravel, we’ve ditched the ShopifyAPI - but this will be used later. Now we need to connect Vue into our new Twig template, which we’ve named vueapp. Create the following file:\nresources/views/vueapp.twig\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My VueJs app\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;csrf-token\u0026quot; content=\u0026quot;{{ csrf_token() }}\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;app-entry\u0026gt;\u0026lt;/app-entry\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026quot;{{ asset('js/app.js') }}\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The CSRF token is important - Laravel passes a token to Vue to prevent cross-site request forgeries. There are a couple of other things happening here - firstly, \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt; is the div tag we are binding Vue to, and \u0026lt;app-entry\u0026gt; is a custom Vue component that we’ve not built yet, so we’ll build that out shortly.\nBuilding Vue Scaffolding Next, we need to build our app entry point for our app. We’re treating it like a component, but sitting it outside the baked-in components folder as it’s the front end entry point for the rest of Vue. Create a new file:\nresources/js/AppEntry.vue\n\u0026lt;template\u0026gt; \u0026lt;p\u0026gt;App Entry Point\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { mounted() { console.log('Rendered app entry point') } } \u0026lt;/script\u0026gt; So, the last part is to register the \u0026lt;app-entry\u0026gt; component in the Vue bootloader. Head to resources/js/app.js\nThere’s a lot of comments in here from the Laravel boilerplate code - delete all of the code and replace it with the following:\nrequire('./bootstrap'); window.Vue = require('vue'); Vue.component('app-entry', require('./AppEntry.vue').default); const app = new Vue({ el: '#app', }); So, our entry component has been loaded, and Vue has been booted, being bound to the div id app. Load up the route in your browser:\nhttp://localhost:8000/vueapp\nAnd we can see with our browser devtools open that vue is initialized. We’re up and running!\nCreating an API endpoint Now we have an entry point we’ll create a new component that will render out a list of products. Before we can create the frontend component, we’ll need to create an API endpoint which will effectively be a proxy from Shopify’s API.\nLaravel comes with an automatically configured /api/ base root for API calls, with separated logic from HTTP routes. Add the following line:\nroutes/api.php\nRoute::get('/products', 'ShopifyController@products');\nWe’ve not created the ‘products’ method in the ShopifyController, so let’s create it:\napp/Http/Controllers/ShopifyController.php\npublic function products() { $shopifyApi = app('ShopifyAPI'); $products = $shopifyApi-\u0026gt;call('GET', '/admin/products.json'); return (array) $products; } Navigate to your endpoint and you should get the data back:\nThat’s it for the API endpoint - we’re not using any authorisation as this is a basic guide, but you can check out https://laravel.com/docs/5.7/authentication for more info on custom auth implementations including basic, bearer tokens and oAuth.\nCreating a Component and Fetching API Data Let’s create the component that we’re going to render the products in - create a new file in the components directory:\nresources/js/components/ProductComponent.vue\n\u0026lt;template\u0026gt; \u0026lt;div id=”root element”\u0026gt;Vue components always need one root element\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { mounted() { console.log('Component loaded') }, data() { return { apidata: \u0026quot;\u0026quot; } }, } \u0026lt;/script\u0026gt; Now register the component in Vue:\nresources/js/app.js\nVue.component('shopify-products', require('./components/ProductsComponent.vue').default); And drop the component into our app template: \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;shopify-products\u0026gt;\u0026lt;/shopify-products\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; There are a few things to explain with the Vue template before we can fetch products from the api endpoint and loop over them. Firstly, the logic behind the \u0026lt;script\u0026gt; tag - each Vue component has a lifecycle which can be tapped into at various stages and enables you to emit events, set watchers; anything you’ll need can be coded here.\nYou can find out more about coding components here. We’ve started off by just adding the data() method, which returns data that you’ll use or bind to the component. We’ve named a key in here apidata and created it as a blank string - the reason for this is that it will be where the products are stored for the components - once we code in a fetch after the module has loaded in the lifecycle.\nTo fill this data, we’re going to add a method, using axios which will be called when the created() method is executed in the lifecycle.\nresources/js/components/ProductComponent.vue\n\u0026lt;script\u0026gt; export default { mounted() { console.log('Component loaded') }, created() { this.fetchProducts() }, data() { return { apidata: \u0026quot;\u0026quot; } }, methods: { fetchProducts() { axios.get('/api/products').then(response =\u0026gt; { this.apidata = response.data.products }) } } } \u0026lt;/script\u0026gt; Rendering in Polaris Products will now be available to the template under apidata - using Vue’s v-for loop, we can iterate over the array in the template.\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026quot;card\u0026quot; v-for=\u0026quot;product in apidata\u0026quot;\u0026gt; \u0026lt;h5\u0026gt;{{ product.title }}\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;{{ product.body_html }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; Load up the page and bingo! Here are our products rendered out:\nWhen developing in Vue, the Vue devtools extension is extremely useful for debugging. You can see these tools here.\nIf we use the devtools, we can see the value our apidata data object has taken (i.e. the API’s response which has been cast to an array):\nHooking in Polaris So our final part is to use EastsideCo’s Vue Polaris port to render out our products. We install the Polaris library via npm:\nnpm install @eastsideco/polaris-vue\nThen we bind it into our Vue app:\nresources/js/app.js\nrequire('./bootstrap'); import PolarisVue from '@eastsideco/polaris-vue/lib/polaris-vue'; import PolarisVueCss from '@eastsideco/polaris-vue/lib/polaris-vue.css'; window.Vue = require('vue'); Vue.component('app-entry', require('./AppEntry.vue').default); Vue.component('shopify-products', require('./components/ProductsComponent.vue').default); Vue.use(PolarisVue); const app = new Vue({ el: '#app', }); We will now have access to Polaris-named custom HTML tags - you can see a full list of the ported tags on the docs page at http://demo.polaris-vue.eastsideco.io/\nOur template is now refactored to look like this:\nresources/js/components/ProductsComponent.vue\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;polaris-page\u0026gt; \u0026lt;polaris-card sectioned title=\u0026quot;My Shopify Vue App\u0026quot;\u0026gt; Uses EastsideCo port of Polaris to Vue \u0026lt;/polaris-card\u0026gt; \u0026lt;polaris-card sectioned\u0026gt; \u0026lt;polaris-layout-section\u0026gt; \u0026lt;polaris-resource-list :items=\u0026quot;apidata\u0026quot;\u0026gt; \u0026lt;template slot=\u0026quot;item\u0026quot; slot-scope=\u0026quot;props\u0026quot;\u0026gt; \u0026lt;polaris-resource-list-item :attribute-one=\u0026quot;props.item.title\u0026quot; :attribute-two=\u0026quot;props.item.created_at\u0026quot; :media=\u0026quot;props.item.image\u0026quot;\u0026gt; \u0026lt;/polaris-resource-list-item\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/polaris-resource-list\u0026gt; \u0026lt;/polaris-layout-section\u0026gt; \u0026lt;/polaris-card\u0026gt; \u0026lt;/polaris-page\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; There’s quite a lot going on here, so let’s break it down -\nThe opening \u0026lt;div\u0026gt; is just a container - this is because Vue.js components always need a root element. We then define a CSS container for the page using \u0026lt;polaris-page\u0026gt;.\nThe layout system is defined quite well in the docs mentioned earlier.\nThe \u0026lt;polaris-resource-list\u0026gt; however is a more complex component - it takes a prop passed in, which in this case we’re passing in the response to the API endpoint we created. The resource list then has a scoped slot, in which we are creating a \u0026lt;polaris-resource-list-item\u0026gt;. Within the slot, you define another slot - “item” (think of this as an iteration over a foreach loop as a simple explanation) and then the whole scope of the slot (which is apidata) is named as the slot’s props. So, to get access at this point to the current iterations’ properties, we use props.item. These attributes such as attribute-one and media are parsed by the component and rendered in the Polaris library. The result is a basic product list:\nAnd there we are - a list of products plugged into Vue Polaris.\nYou can find a working copy of this demo code on our repo at https://github.com/EastsideCo/blog-shopify-vue\n",
    "ref": "/blog/shopify-vue/"
  },{
    "title": "The Dev Radio Episode 001",
    "date": "",
    "description": "",
    "body": "https://devtheatre.s3-eu-west-1.amazonaws.com/The+Dev+Radio+001.mp3 \nTracklist  Ennio Morricone - L\u0026rsquo;estasi dell\u0026rsquo;oro [Capitol, 1966] The Revolutionary Corps Of Teenage Jesus - Protection Rat [Creeping Bent, 1999] Toydrum - Precinct 21 [Self-released/Underscore Collective, 2014] Wolf Alice - Don\u0026rsquo;t Delete the Kisses [Dirty Hit, 2017] Tha 4orce - Save the Children feat. Lady Sanity [King of the Beats, 2017] Slade - Coz I Luv U [Polydor, 1971] Illbilly Hitec - Chase [Echo Beach, 2019] Joe Pesci - Wise Guy [Columbia, 1998] Kaytranada - 10% [RCA, 2019] Mötley Crüe - Mutherfucker of the Year [Mötley Records, 2008] Unloved - Heartbreak [Heavenly, 2019] Clark - Legacy Pet [Throttle, 2019] George Michael - Shoot the Dog [Polydor, 2002] Richard File - Now or Never [1231485 Records DK, 2019] Death Cab for Cutie - Autumn Love [Atlantic, 2018] Logistics - Rhythm Track [Hospital, 2019] Broadcast - Before We Begin [Warp, 2003] Expensive Soul - O Amor É Mágico [Vidisco, 2010] Octa Octa - Can You See Me? [T4T LUV NRG, 2019] Simple Minds - Summer [BMG, 2017] sleepmakeswaves - Children [Unreleased, 2017] Wendy \u0026amp; Bonnie - By The Sea [Skye Records, 1969]  ",
    "ref": "/dev-radio/dev-radio-001/"
  },{
    "title": "A Guide on How to Develop a Shopify App with Laravel & PHP",
    "date": "",
    "description": "Basic building blocks for an integration with Shopify's API using Laravel.",
    "body": "This article was originally written by me for Eastside Co\u0026rsquo;s blog: you can find the original here\nThe Shopify platform contains a whole host of built in functionality. However, thanks to its fully featured REST and GraphQL API access, it also has a thriving app store with a huge range of plug-ins designed to enhance Shopify store functionality in many ways. I\u0026rsquo;ll talk you through a Shopify app development tutorial to help you get started on making your own Shopify app, using the Laravel PHP framework.\nWhat is a Shopify App? A Shopify app is an externally-hosted service that has access to and can manipulate a Shopify store. For the most part, any feature you can see in the admin panel can be accessed and changed via the API - it can modify/create products, view or change orders and so on. Apps are a great way to automate common tasks such as bulk-editing collections or extending your store\u0026rsquo;s functionality, like adding reviews to your products. The 2 Types of Shopify Apps\nPublic apps can be submitted to the app store and used by multiple stores. To create and submit normal apps to the Shopify App Store, you need to own a Shopify Partner account.\nPrivate apps are usually used by a single store. In this article, we’ll be going through the steps for Shopify private app development, as they can be created by anyone with a Shopify store and require less steps to set up.\nHow to Create a Shopify App Using PHP To follow this guide, you will need:\n A Shopify store you want to make an app for. PHP7.2 or higher and some familiarity with the language (https://www.php.net/supported-versions.php). Some familiarity with a command line (cmd.exe/Powershell for Windows, bash/zsh/fish for MacOS and unix-like distributions). Some familiarity with Composer.  API Keys Let’s begin by creating a set of API keys for our app. Head to the Apps panel from the right hand navigation.\nClick ‘Create a new private app’ to get the prompt to name your app.\nWe\u0026rsquo;ll leave the API dropdowns so that the app only has read access to your store.\nMake a note of your new credentials. And with that step, it’s time to set up a local Laravel \u0026amp; vue.js app.\nSetting up a Laravel Skeleton So, first we’re going to install a fresh Laravel skeleton app. You can do this via the Laravel installer (https://github.com/laravel/installer), but the quickest route is to use Composer’s create project. Open up your command line and create a new project:\ncomposer create-project --prefer-dist laravel/laravel shopifyApp\nWe’re going to use Twig (https://twig.symfony.com/) instead of Laravel’s built-in Blade templating system for the front end, because the syntax Twig uses is based on Ruby’s Liquid templating system, used by Shopify on its platform. We’re going to be using Rob Crowe’s bridge connector for Laravel. Install Twig, following the instructions on the readme located here - https://github.com/rcrowe/TwigBridge\nNow we have Twig, let’s get a page up and running by creating a new route, controller and Twig template. To create a new controller, in the command line run\nphp artisan make:controller shopifyController\nNow we need to wire up a route, controller and view. Add a new route to routes/web.php:\nRoute::get('/index', 'ShopifyController@index');\nCreate the method in your controller, which will now be in /app/Http/Controllers/ShopifyController:\n\u0026lt;?php namespace App\\Http\\Controllers; class ShopifyController extends Controller { public function index() { return view('index'); } } The last part is to create the ‘index’ view - create a new file in: /resources/views called index.twig.\nUsing Eastside Co’s API Wrapper We now need to use the Eastside Co Shopify API wrapper to bring us back some data to render. Eastside Co have already got a PHP package on packagist - it’s an API code wrapper for common REST API tasks with Shopify. Navigate into the ShopifyApp directory in your command line and install the Eastside Co API:\ncomposer require esc/shopify\nTo enable the installed package, we need to add it to services and install assets. You do this by doing the following:\nAdd \\Esc\\Shopify\\Providers\\APIServiceProvider::class into the providers array in /config/app.php.\nRun php artisan vendor:publish in the command line to copy the package assets into Laravel.\nWe can now input the ShopifyAPI keys. Create a copy of your .env.dist and called it .env. In the .env file, add the keys that the API object will read in when the service is created in Laravel:\nSHOPIFY_API_KEY = \u0026lt;API Key\u0026gt; SHOPIFY_API_SECRET = \u0026lt;Shared Secret\u0026gt; SHOPIFY_ACCESS_TOKEN = \u0026lt;Password\u0026gt; SHOPIFY_SHOP_DOMAIN=\u0026lt;my-store-domain.myshopify.com\u0026gt; Final Render Let’s get the data in the controller and pass it to the index Twig template we created. Change the controller’s index method to look like the following:\npublic function index() { $shopifyApi = app(‘ShopifyAPI’); $products = $shopifyApi-\u0026gt;call('GET', 'admin/products.json\u0026amp;page=1'); return view('index', (array) $products); } We’re now passing the first page of our store’s products to Twig, which we can now render out - open the resource/views/index.twig file we created. You can use a foreach loop in twig which operates the same as the php foreach function:\n\u0026lt;html\u0026gt; \u0026lt;p\u0026gt;This is an example Shopify APP page!\u0026lt;/p\u0026gt; {% for product in products %} This product is called: {{ product.title }}\u0026lt;/br\u0026gt; {% endfor %} \u0026lt;/html\u0026gt; That’s it! Navigate to your route and the product titles will be rendered out by Twig.\nA repository of this basic scaffolding is available on our Github, at https://github.com/EastsideCo/blog-basic-laravel\nHopefully that helps give you some insight into the process behind creating a private Shopify app. If you have an idea for a private app but need developer support, get in touch - we have a whole team of developers dedicated to creating public and private Shopify apps for a whole range of functionality.\n",
    "ref": "/blog/shopify-laravel/"
  },{
    "title": "Black Friday Retrospective - A Technical View",
    "date": "",
    "description": "Sometimes we really do over-engineer things.",
    "body": "This article was originally written by me for Eastside Co\u0026rsquo;s blog: you can find the original here\n“Right, what are we going to use\u0026hellip;Sentry? Pagerduty? Have we got an account? What do you mean, we’ve not set up auto-scaling groups? OK, have we got time to create them instead of manually spinning up AMI EC2s?”\nBlack Friday has had a very patchy impact in the UK on the high street over the last decade, but where it is undoubtedly having the most influence is in the world of ecommerce - where the territory market restrictions are removed. According to UK-based hosting provider UKFast, an estimated £1.4 billion was spent during Black Friday - but this is dwarfed by the $5 billion spent in the US.\nAWS Performance Statistics Our clients for whom we have created marketing, development and design solutions will be trading with the US, but the biggest hit for us at Eastside Co comes from our 9 apps, available in the Shopify app store. Of these, 16,194 installs are currently active - that’s a lot of US installs. One app alone, Hindsight, generates 13GB of data every day.\nReading the statistics from AWS Cloudwatch makes for some interesting reading about the strain that was being put on our apps. These apps are written in Laravel PHP and vue.js, and are for the most part managed in terms of deployment pipelines by Forge. So, what can an app with this fairly straightforward infrastructure handle?\nOur peak HTTP requests on Black Friday (23rd November 2018) were hovering at around 2 million an hour from 2pm to 8pm GMT. From 22nd to 23rd November the CDN served the Shopify Embedded App SDK 1.88 million times, the total data serve totalling 126.75GB on that one file.\nShopify themselves created a dashboard for the event, updated in real time every second. While we set up several screens to monitor Cloudwatch with some custom dashboards, we also kept an eye on the traffic. The moment captured in the image below, about 2pm on Black Friday, captures the scale of orders being processed - $933,973 of transactions per minute, 10,951 orders per minute. Considering that our various microservices and apps are hooked into so many Shopify merchant stores, you can imagine what the load balancers looked like.\nHow did we prepare for Black Friday? So - to get to the point of of all this: what did we do to prepare? How did Black Friday play out?\nThe TL:DR of this is: we didn’t need to do much. We set up a couple of monitors with custom dashboards on Cloudwatch with 40 or so alarms set up on ElastiCache, EC2 and our Aurora RDSs, and only scaled up one app manually - CartConvert.\nCartConvert is installed on 2,200 merchant stores at the time of writing; it runs a recommendation engine that generates API calls to Shopify wherever the code is called on your store - that’s a lot of calls - the solution? Scaling the API layer 3x and plugging them into the load balancer - that’s it. With 4x EC2s in an API layer handled by the load balancer and about 1,000 queries a second hitting Aurora, we spent Black Friday watching screens and fixing - well, nothing, as it turns out.\nMonitoring Black Friday So, we didn’t exactly go mad with the architecture. What about the monitoring? Again, we found it best to play it simple. I’ve seen Datadog, New Relic, PagerDuty, Sentry and Slack all hooked up to the point of information overload. You know the kind of stack - the one where one Slack channel is hooked up to Cloudwatch and an autolinter and a code quality scanner and Sentry. While there are many use cases for this amount of tooling, we kept it simple, just like how our AWS is configured: using Cloudwatch hooked up to our phones, changing thresholds for alarms on all our apps to compensate for the expected spike in CPU use.\nIt’s so easy right now to get sucked up into a whirlpool of event-driven architecture, thousands of lambdas or microservices and auto scaled groups. It sounds so obvious, but at Eastside Co we found it far more productive to keep our architecture simple and focused. The result?\nA lot of happy merchants, and no burning servers. Here’s to next year!\n",
    "ref": "/blog/black-friday/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
